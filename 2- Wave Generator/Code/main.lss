
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000106  00800060  000009de  00000a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800166  00800166  00000b78  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000135  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac0  00000000  00000000  00000d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000312  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ae  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002eb  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000304  00000000  00000000  0000258b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000288f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/interrupt.h>
#include "waveform.h"

int main(void)
{
	WAVE_Init();
  92:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <WAVE_Init>
	
	sei();
  96:	78 94       	sei

    while(1)
    { 
		WAVE_MainFunction();
  98:	0e 94 50 02 	call	0x4a0	; 0x4a0 <WAVE_MainFunction>
  9c:	fd cf       	rjmp	.-6      	; 0x98 <main+0x6>

0000009e <__vector_11>:
static volatile uint16_t rx_cnt;



ISR(USART_RXC_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
    uint8_t rx_data;
    
    cli();
  b6:	f8 94       	cli
    
    /* Read rx_data. */
    rx_data = UDR;
  b8:	4c b1       	in	r20, 0x0c	; 12
    
    /* Ignore spaces */
    if((rx_cnt < rx_len) && (rx_data != ' '))
  ba:	20 91 70 01 	lds	r18, 0x0170
  be:	30 91 71 01 	lds	r19, 0x0171
  c2:	80 91 6e 01 	lds	r24, 0x016E
  c6:	90 91 6f 01 	lds	r25, 0x016F
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	b0 f4       	brcc	.+44     	; 0xfc <__vector_11+0x5e>
  d0:	40 32       	cpi	r20, 0x20	; 32
  d2:	a1 f0       	breq	.+40     	; 0xfc <__vector_11+0x5e>
    {
        rx_buffer[rx_cnt] = rx_data;
  d4:	80 91 70 01 	lds	r24, 0x0170
  d8:	90 91 71 01 	lds	r25, 0x0171
  dc:	e0 91 6c 01 	lds	r30, 0x016C
  e0:	f0 91 6d 01 	lds	r31, 0x016D
  e4:	e8 0f       	add	r30, r24
  e6:	f9 1f       	adc	r31, r25
  e8:	40 83       	st	Z, r20
        rx_cnt++;
  ea:	80 91 70 01 	lds	r24, 0x0170
  ee:	90 91 71 01 	lds	r25, 0x0171
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 71 01 	sts	0x0171, r25
  f8:	80 93 70 01 	sts	0x0170, r24
    else
    {
        /* Do nothing. */
    }
    
    sei();
  fc:	78 94       	sei
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_13>:

ISR(USART_TXC_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
    cli();
 12c:	f8 94       	cli
    
    tx_cnt++;
 12e:	80 91 6a 01 	lds	r24, 0x016A
 132:	90 91 6b 01 	lds	r25, 0x016B
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	90 93 6b 01 	sts	0x016B, r25
 13c:	80 93 6a 01 	sts	0x016A, r24
    
    if(tx_cnt < tx_len)
 140:	20 91 6a 01 	lds	r18, 0x016A
 144:	30 91 6b 01 	lds	r19, 0x016B
 148:	80 91 68 01 	lds	r24, 0x0168
 14c:	90 91 69 01 	lds	r25, 0x0169
 150:	28 17       	cp	r18, r24
 152:	39 07       	cpc	r19, r25
 154:	60 f4       	brcc	.+24     	; 0x16e <__vector_13+0x58>
    {
        /* Send next byte. */
        UDR = tx_buffer[tx_cnt];
 156:	80 91 6a 01 	lds	r24, 0x016A
 15a:	90 91 6b 01 	lds	r25, 0x016B
 15e:	e0 91 66 01 	lds	r30, 0x0166
 162:	f0 91 67 01 	lds	r31, 0x0167
 166:	e8 0f       	add	r30, r24
 168:	f9 1f       	adc	r31, r25
 16a:	80 81       	ld	r24, Z
 16c:	8c b9       	out	0x0c, r24	; 12
    }
    sei();
 16e:	78 94       	sei
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <UART_Init>:


void UART_Init(UART_cfg *my_cfg)
{
 186:	fc 01       	movw	r30, r24
    /* Set baud rate */
    UBRRH = my_cfg->UBRRH_cfg;
 188:	80 81       	ld	r24, Z
 18a:	80 bd       	out	0x20, r24	; 32
    UBRRL = my_cfg->UBRRL_cfg;
 18c:	81 81       	ldd	r24, Z+1	; 0x01
 18e:	89 b9       	out	0x09, r24	; 9
    
    UCSRA = my_cfg->UCSRA_cfg;
 190:	82 81       	ldd	r24, Z+2	; 0x02
 192:	8b b9       	out	0x0b, r24	; 11
    UCSRB = my_cfg->UCSRB_cfg;
 194:	83 81       	ldd	r24, Z+3	; 0x03
 196:	8a b9       	out	0x0a, r24	; 10
    UCSRC = my_cfg->UCSRC_cfg;
 198:	84 81       	ldd	r24, Z+4	; 0x04
 19a:	80 bd       	out	0x20, r24	; 32
    
}
 19c:	08 95       	ret

0000019e <UART_SendPayload>:

void UART_SendPayload(uint8_t *tx_data, uint16_t len)
{
    tx_buffer = tx_data;
 19e:	fc 01       	movw	r30, r24
 1a0:	90 93 67 01 	sts	0x0167, r25
 1a4:	80 93 66 01 	sts	0x0166, r24
    tx_len    = len;
 1a8:	70 93 69 01 	sts	0x0169, r23
 1ac:	60 93 68 01 	sts	0x0168, r22
    tx_cnt    = 0;
 1b0:	10 92 6b 01 	sts	0x016B, r1
 1b4:	10 92 6a 01 	sts	0x016A, r1
    
    /* Wait for UDR is empty. */
    while(0 == (UCSRA & (1 << UDRE)));
 1b8:	5d 9b       	sbis	0x0b, 5	; 11
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <UART_SendPayload+0x1a>
    
    /* Send the first byte to trigger the TxC interrupt. */
    UDR = tx_buffer[0];
 1bc:	80 81       	ld	r24, Z
 1be:	8c b9       	out	0x0c, r24	; 12
    
}
 1c0:	08 95       	ret

000001c2 <UART_ReceivePayload>:

void UART_ReceivePayload(uint8_t *rx_data, uint16_t len)
{
    rx_buffer = rx_data;
 1c2:	90 93 6d 01 	sts	0x016D, r25
 1c6:	80 93 6c 01 	sts	0x016C, r24
    rx_len    = len;
 1ca:	70 93 6f 01 	sts	0x016F, r23
 1ce:	60 93 6e 01 	sts	0x016E, r22
    rx_cnt    = 0;
 1d2:	10 92 71 01 	sts	0x0171, r1
 1d6:	10 92 70 01 	sts	0x0170, r1
}
 1da:	08 95       	ret

000001dc <UART_IsTxComplete>:

uint8_t UART_IsTxComplete(void)
{
    return ( (tx_cnt >= tx_len) ? 1 : 0 );
 1dc:	20 91 6a 01 	lds	r18, 0x016A
 1e0:	30 91 6b 01 	lds	r19, 0x016B
 1e4:	80 91 68 01 	lds	r24, 0x0168
 1e8:	90 91 69 01 	lds	r25, 0x0169
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	28 17       	cp	r18, r24
 1f0:	39 07       	cpc	r19, r25
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <UART_IsTxComplete+0x1a>
 1f4:	41 e0       	ldi	r20, 0x01	; 1
}
 1f6:	84 2f       	mov	r24, r20
 1f8:	08 95       	ret

000001fa <UART_IsRxComplete>:

uint8_t UART_IsRxComplete(void)
{
    return ( (rx_cnt >= rx_len) ? 1 : 0 );
 1fa:	20 91 70 01 	lds	r18, 0x0170
 1fe:	30 91 71 01 	lds	r19, 0x0171
 202:	80 91 6e 01 	lds	r24, 0x016E
 206:	90 91 6f 01 	lds	r25, 0x016F
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	28 17       	cp	r18, r24
 20e:	39 07       	cpc	r19, r25
 210:	08 f0       	brcs	.+2      	; 0x214 <UART_IsRxComplete+0x1a>
 212:	41 e0       	ldi	r20, 0x01	; 1
}
 214:	84 2f       	mov	r24, r20
 216:	08 95       	ret

00000218 <squareWave>:
static uint8_t freq_value = 0;
static uint8_t waveform_index = WAVEFORM_NUM;


void squareWave(uint8_t amp, uint8_t freq)
{
 218:	2f 92       	push	r2
 21a:	3f 92       	push	r3
 21c:	4f 92       	push	r4
 21e:	5f 92       	push	r5
 220:	6f 92       	push	r6
 222:	7f 92       	push	r7
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	0f 92       	push	r0
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	89 83       	std	Y+1, r24	; 0x01
	// Refresh DAC DDR to be output.
    DAC_DDR = 255;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	87 bb       	out	0x17, r24	; 23
	
	int delay_time = -2 * (int) freq + 1000; 
	
    DAC_PORT = 0x00;
 248:	18 ba       	out	0x18, r1	; 24
    _delay_us(delay_time);
 24a:	84 ef       	ldi	r24, 0xF4	; 244
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	86 1b       	sub	r24, r22
 250:	91 09       	sbc	r25, r1
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	aa 27       	eor	r26, r26
 258:	97 fd       	sbrc	r25, 7
 25a:	a0 95       	com	r26
 25c:	ba 2f       	mov	r27, r26
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	0e 94 b0 03 	call	0x760	; 0x760 <__floatsisf>
 266:	1b 01       	movw	r2, r22
 268:	2c 01       	movw	r4, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 26a:	2b ea       	ldi	r18, 0xAB	; 171
 26c:	3a ea       	ldi	r19, 0xAA	; 170
 26e:	4a e2       	ldi	r20, 0x2A	; 42
 270:	50 e4       	ldi	r21, 0x40	; 64
 272:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__mulsf3>
 276:	5b 01       	movw	r10, r22
 278:	6c 01       	movw	r12, r24
	if (__tmp < 1.0)
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e8       	ldi	r20, 0x80	; 128
 280:	5f e3       	ldi	r21, 0x3F	; 63
 282:	0e 94 16 03 	call	0x62c	; 0x62c <__cmpsf2>
 286:	88 23       	and	r24, r24
 288:	14 f4       	brge	.+4      	; 0x28e <squareWave+0x76>
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	54 c0       	rjmp	.+168    	; 0x336 <squareWave+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
 28e:	c6 01       	movw	r24, r12
 290:	b5 01       	movw	r22, r10
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	4f e7       	ldi	r20, 0x7F	; 127
 298:	53 e4       	ldi	r21, 0x43	; 67
 29a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__gesf2>
 29e:	18 16       	cp	r1, r24
 2a0:	0c f0       	brlt	.+2      	; 0x2a4 <squareWave+0x8c>
 2a2:	45 c0       	rjmp	.+138    	; 0x32e <squareWave+0x116>
	{
		_delay_ms(__us / 1000.0);
 2a4:	c2 01       	movw	r24, r4
 2a6:	b1 01       	movw	r22, r2
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	4a e7       	ldi	r20, 0x7A	; 122
 2ae:	54 e4       	ldi	r21, 0x44	; 68
 2b0:	0e 94 1a 03 	call	0x634	; 0x634 <__divsf3>
 2b4:	3b 01       	movw	r6, r22
 2b6:	4c 01       	movw	r8, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	4a ef       	ldi	r20, 0xFA	; 250
 2be:	54 e4       	ldi	r21, 0x44	; 68
 2c0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__mulsf3>
 2c4:	7b 01       	movw	r14, r22
 2c6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e8       	ldi	r20, 0x80	; 128
 2ce:	5f e3       	ldi	r21, 0x3F	; 63
 2d0:	0e 94 16 03 	call	0x62c	; 0x62c <__cmpsf2>
 2d4:	88 23       	and	r24, r24
 2d6:	1c f4       	brge	.+6      	; 0x2de <squareWave+0xc6>
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	24 c0       	rjmp	.+72     	; 0x326 <squareWave+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
 2de:	c8 01       	movw	r24, r16
 2e0:	b7 01       	movw	r22, r14
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	3f ef       	ldi	r19, 0xFF	; 255
 2e6:	4f e7       	ldi	r20, 0x7F	; 127
 2e8:	57 e4       	ldi	r21, 0x47	; 71
 2ea:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__gesf2>
 2ee:	18 16       	cp	r1, r24
 2f0:	b4 f4       	brge	.+44     	; 0x31e <squareWave+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2f2:	c4 01       	movw	r24, r8
 2f4:	b3 01       	movw	r22, r6
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 e2       	ldi	r20, 0x20	; 32
 2fc:	51 e4       	ldi	r21, 0x41	; 65
 2fe:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__mulsf3>
 302:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 306:	88 ec       	ldi	r24, 0xC8	; 200
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	05 c0       	rjmp	.+10     	; 0x316 <squareWave+0xfe>
 30c:	fc 01       	movw	r30, r24
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <squareWave+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 312:	61 50       	subi	r22, 0x01	; 1
 314:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 316:	61 15       	cp	r22, r1
 318:	71 05       	cpc	r23, r1
 31a:	c1 f7       	brne	.-16     	; 0x30c <squareWave+0xf4>
 31c:	0e c0       	rjmp	.+28     	; 0x33a <squareWave+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 31e:	c8 01       	movw	r24, r16
 320:	b7 01       	movw	r22, r14
 322:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
 326:	cb 01       	movw	r24, r22
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <squareWave+0x110>
 32c:	06 c0       	rjmp	.+12     	; 0x33a <squareWave+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 32e:	c6 01       	movw	r24, r12
 330:	b5 01       	movw	r22, r10
 332:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 336:	6a 95       	dec	r22
 338:	f1 f7       	brne	.-4      	; 0x336 <squareWave+0x11e>
    DAC_PORT = amp;
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	88 bb       	out	0x18, r24	; 24
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
	if (__tmp < 1.0)
 33e:	c6 01       	movw	r24, r12
 340:	b5 01       	movw	r22, r10
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e8       	ldi	r20, 0x80	; 128
 348:	5f e3       	ldi	r21, 0x3F	; 63
 34a:	0e 94 16 03 	call	0x62c	; 0x62c <__cmpsf2>
 34e:	88 23       	and	r24, r24
 350:	14 f4       	brge	.+4      	; 0x356 <squareWave+0x13e>
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	54 c0       	rjmp	.+168    	; 0x3fe <squareWave+0x1e6>
		__ticks = 1;
	else if (__tmp > 255)
 356:	c6 01       	movw	r24, r12
 358:	b5 01       	movw	r22, r10
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	4f e7       	ldi	r20, 0x7F	; 127
 360:	53 e4       	ldi	r21, 0x43	; 67
 362:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__gesf2>
 366:	18 16       	cp	r1, r24
 368:	0c f0       	brlt	.+2      	; 0x36c <squareWave+0x154>
 36a:	45 c0       	rjmp	.+138    	; 0x3f6 <squareWave+0x1de>
	{
		_delay_ms(__us / 1000.0);
 36c:	c2 01       	movw	r24, r4
 36e:	b1 01       	movw	r22, r2
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	4a e7       	ldi	r20, 0x7A	; 122
 376:	54 e4       	ldi	r21, 0x44	; 68
 378:	0e 94 1a 03 	call	0x634	; 0x634 <__divsf3>
 37c:	5b 01       	movw	r10, r22
 37e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	4a ef       	ldi	r20, 0xFA	; 250
 386:	54 e4       	ldi	r21, 0x44	; 68
 388:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__mulsf3>
 38c:	7b 01       	movw	r14, r22
 38e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e8       	ldi	r20, 0x80	; 128
 396:	5f e3       	ldi	r21, 0x3F	; 63
 398:	0e 94 16 03 	call	0x62c	; 0x62c <__cmpsf2>
 39c:	88 23       	and	r24, r24
 39e:	1c f4       	brge	.+6      	; 0x3a6 <squareWave+0x18e>
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	24 c0       	rjmp	.+72     	; 0x3ee <squareWave+0x1d6>
		__ticks = 1;
	else if (__tmp > 65535)
 3a6:	c8 01       	movw	r24, r16
 3a8:	b7 01       	movw	r22, r14
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	3f ef       	ldi	r19, 0xFF	; 255
 3ae:	4f e7       	ldi	r20, 0x7F	; 127
 3b0:	57 e4       	ldi	r21, 0x47	; 71
 3b2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__gesf2>
 3b6:	18 16       	cp	r1, r24
 3b8:	b4 f4       	brge	.+44     	; 0x3e6 <squareWave+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3ba:	c6 01       	movw	r24, r12
 3bc:	b5 01       	movw	r22, r10
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	40 e2       	ldi	r20, 0x20	; 32
 3c4:	51 e4       	ldi	r21, 0x41	; 65
 3c6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__mulsf3>
 3ca:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3ce:	88 ec       	ldi	r24, 0xC8	; 200
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <squareWave+0x1c6>
 3d4:	fc 01       	movw	r30, r24
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <squareWave+0x1be>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3da:	61 50       	subi	r22, 0x01	; 1
 3dc:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3de:	61 15       	cp	r22, r1
 3e0:	71 05       	cpc	r23, r1
 3e2:	c1 f7       	brne	.-16     	; 0x3d4 <squareWave+0x1bc>
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <squareWave+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3e6:	c8 01       	movw	r24, r16
 3e8:	b7 01       	movw	r22, r14
 3ea:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
 3ee:	cb 01       	movw	r24, r22
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <squareWave+0x1d8>
 3f4:	06 c0       	rjmp	.+12     	; 0x402 <squareWave+0x1ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 3f6:	c6 01       	movw	r24, r12
 3f8:	b5 01       	movw	r22, r10
 3fa:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3fe:	6a 95       	dec	r22
 400:	f1 f7       	brne	.-4      	; 0x3fe <squareWave+0x1e6>
    _delay_us(delay_time);
}
 402:	0f 90       	pop	r0
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	9f 90       	pop	r9
 41a:	8f 90       	pop	r8
 41c:	7f 90       	pop	r7
 41e:	6f 90       	pop	r6
 420:	5f 90       	pop	r5
 422:	4f 90       	pop	r4
 424:	3f 90       	pop	r3
 426:	2f 90       	pop	r2
 428:	08 95       	ret

0000042a <staircaseWave>:

void staircaseWave(uint8_t amp, uint8_t freq)
{
    // Refresh DAC DDR to be output.
    DAC_DDR = 255;
 42a:	9f ef       	ldi	r25, 0xFF	; 255
 42c:	97 bb       	out	0x17, r25	; 23

    // Generate waveform.
    DAC_PORT = 0x00;
 42e:	18 ba       	out	0x18, r1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 430:	20 e9       	ldi	r18, 0x90	; 144
 432:	31 e0       	ldi	r19, 0x01	; 1
 434:	f9 01       	movw	r30, r18
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <staircaseWave+0xc>
    _delay_us(200);
    DAC_PORT = 0x33;
 43a:	83 e3       	ldi	r24, 0x33	; 51
 43c:	88 bb       	out	0x18, r24	; 24
 43e:	f9 01       	movw	r30, r18
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <staircaseWave+0x16>
    _delay_us(200);
    DAC_PORT = 0x66;
 444:	86 e6       	ldi	r24, 0x66	; 102
 446:	88 bb       	out	0x18, r24	; 24
 448:	f9 01       	movw	r30, r18
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <staircaseWave+0x20>
    _delay_us(200);
    DAC_PORT = 0x99;
 44e:	89 e9       	ldi	r24, 0x99	; 153
 450:	88 bb       	out	0x18, r24	; 24
 452:	f9 01       	movw	r30, r18
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <staircaseWave+0x2a>
    _delay_us(200);
    DAC_PORT = 0xCC;
 458:	8c ec       	ldi	r24, 0xCC	; 204
 45a:	88 bb       	out	0x18, r24	; 24
 45c:	f9 01       	movw	r30, r18
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <staircaseWave+0x34>
    _delay_us(200);
    DAC_PORT = 0xFF;
 462:	98 bb       	out	0x18, r25	; 24
 464:	c9 01       	movw	r24, r18
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__stack+0x7>
    _delay_us(200);
}
 46a:	08 95       	ret

0000046c <triangleWave>:

void triangleWave(uint8_t amp, uint8_t freq)
{
    // Refresh DAC DDR to be output.
    DAC_DDR = 255;
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	87 bb       	out	0x17, r24	; 23
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	40 ed       	ldi	r20, 0xD0	; 208
 474:	57 e0       	ldi	r21, 0x07	; 7
	
	for(uint8_t i = 0; i<=255; i++)
	{
		DAC_PORT = i;
 476:	28 bb       	out	0x18, r18	; 24
 478:	ca 01       	movw	r24, r20
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <triangleWave+0xe>
void triangleWave(uint8_t amp, uint8_t freq)
{
    // Refresh DAC DDR to be output.
    DAC_DDR = 255;
	
	for(uint8_t i = 0; i<=255; i++)
 47e:	2f 5f       	subi	r18, 0xFF	; 255
 480:	fa cf       	rjmp	.-12     	; 0x476 <triangleWave+0xa>

00000482 <sineWave>:
}

void sineWave(uint8_t amp, uint8_t freq)
{
    // Refresh DAC DDR to be output.
    DAC_DDR = 255;
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	87 bb       	out	0x17, r24	; 23
 486:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 488:	2a e1       	ldi	r18, 0x1A	; 26
	
	for(uint8_t i = 0; i<=255; i++)
	{
		DAC_PORT = sine256[i];
 48a:	e9 2f       	mov	r30, r25
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	eb 59       	subi	r30, 0x9B	; 155
 490:	ff 4f       	sbci	r31, 0xFF	; 255
 492:	80 81       	ld	r24, Z
 494:	88 bb       	out	0x18, r24	; 24
 496:	82 2f       	mov	r24, r18
 498:	8a 95       	dec	r24
 49a:	f1 f7       	brne	.-4      	; 0x498 <sineWave+0x16>
void sineWave(uint8_t amp, uint8_t freq)
{
    // Refresh DAC DDR to be output.
    DAC_DDR = 255;
	
	for(uint8_t i = 0; i<=255; i++)
 49c:	9f 5f       	subi	r25, 0xFF	; 255
 49e:	f5 cf       	rjmp	.-22     	; 0x48a <sineWave+0x8>

000004a0 <WAVE_MainFunction>:
    /* Start with getting which wave to generate. */ 
    currentState = UPDATE_WAVE;    
}

void WAVE_MainFunction(void)
{    
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	df 93       	push	r29
 4a6:	cf 93       	push	r28
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <WAVE_MainFunction+0xa>
 4aa:	0f 92       	push	r0
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62

    // Main function must have two states,
    // First state is command parsing and waveform selection.
    // second state is waveform executing.
    switch(currentState)
 4b0:	80 91 72 01 	lds	r24, 0x0172
 4b4:	88 23       	and	r24, r24
 4b6:	09 f4       	brne	.+2      	; 0x4ba <WAVE_MainFunction+0x1a>
 4b8:	5b c0       	rjmp	.+182    	; 0x570 <WAVE_MainFunction+0xd0>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <WAVE_MainFunction+0x20>
 4be:	71 c0       	rjmp	.+226    	; 0x5a2 <WAVE_MainFunction+0x102>
    {
        case UPDATE_WAVE:
        {
            UART_SendPayload((uint8_t *)">", 1);
 4c0:	80 e6       	ldi	r24, 0x60	; 96
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	0e 94 cf 00 	call	0x19e	; 0x19e <UART_SendPayload>
            while (0 == UART_IsTxComplete());
 4cc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <UART_IsTxComplete>
 4d0:	88 23       	and	r24, r24
 4d2:	e1 f3       	breq	.-8      	; 0x4cc <WAVE_MainFunction+0x2c>

            /* Receive the full buffer command. */
            UART_ReceivePayload(cmd_buffer, FULL_CMD_CNT);
 4d4:	85 e7       	ldi	r24, 0x75	; 117
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	69 e0       	ldi	r22, 0x09	; 9
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <UART_ReceivePayload>
            
            /* Pull unitl reception is complete. */
            while(0 == UART_IsRxComplete());
 4e0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_IsRxComplete>
 4e4:	88 23       	and	r24, r24
 4e6:	e1 f3       	breq	.-8      	; 0x4e0 <WAVE_MainFunction+0x40>

            /* Check if the cmd is valid. */
            if((cmd_buffer[MARKER_START] == '@') && (cmd_buffer[MARKER_END] == ';'))
 4e8:	80 91 75 01 	lds	r24, 0x0175
 4ec:	80 34       	cpi	r24, 0x40	; 64
 4ee:	49 f5       	brne	.+82     	; 0x542 <WAVE_MainFunction+0xa2>
 4f0:	80 91 7d 01 	lds	r24, 0x017D
 4f4:	8b 33       	cpi	r24, 0x3B	; 59
 4f6:	29 f5       	brne	.+74     	; 0x542 <WAVE_MainFunction+0xa2>
            {
                // Extract amplitude and freq values before sending them to the waveform generator.
                /* Compute amplitude. */
                {
                    char _buffer[_CMD_AMP_CNT];
                    for(uint8_t i = 0; i < _CMD_AMP_CNT; ++i) { _buffer[i] = cmd_buffer[AMP_OFFSET+i]; }
 4f8:	80 91 77 01 	lds	r24, 0x0177
 4fc:	89 83       	std	Y+1, r24	; 0x01
 4fe:	80 91 78 01 	lds	r24, 0x0178
 502:	8a 83       	std	Y+2, r24	; 0x02
 504:	80 91 79 01 	lds	r24, 0x0179
 508:	8b 83       	std	Y+3, r24	; 0x03
                    amp_value = atoi(_buffer);
 50a:	8e 01       	movw	r16, r28
 50c:	0f 5f       	subi	r16, 0xFF	; 255
 50e:	1f 4f       	sbci	r17, 0xFF	; 255
 510:	c8 01       	movw	r24, r16
 512:	0e 94 c7 04 	call	0x98e	; 0x98e <atoi>
 516:	80 93 73 01 	sts	0x0173, r24
                }

                /* Compute frequency. */
                {
                    char _buffer[_CMD_FRQ_CNT];
                    for(uint8_t i = 0; i < _CMD_FRQ_CNT; ++i) { _buffer[i] = cmd_buffer[FREQ_OFFSET+i]; }
 51a:	80 91 7a 01 	lds	r24, 0x017A
 51e:	89 83       	std	Y+1, r24	; 0x01
 520:	80 91 7b 01 	lds	r24, 0x017B
 524:	8a 83       	std	Y+2, r24	; 0x02
 526:	80 91 7c 01 	lds	r24, 0x017C
 52a:	8b 83       	std	Y+3, r24	; 0x03
                    freq_value = atoi(_buffer);
 52c:	c8 01       	movw	r24, r16
 52e:	0e 94 c7 04 	call	0x98e	; 0x98e <atoi>
 532:	80 93 74 01 	sts	0x0174, r24
                }

                /* Compute waveform. */
                {
                    waveform_index = cmd_buffer[WAVE_OFFSET] - '0';
 536:	80 91 76 01 	lds	r24, 0x0176
 53a:	80 53       	subi	r24, 0x30	; 48
 53c:	80 93 65 01 	sts	0x0165, r24
 540:	07 c0       	rjmp	.+14     	; 0x550 <WAVE_MainFunction+0xb0>
            
            /* Pull unitl reception is complete. */
            while(0 == UART_IsRxComplete());

            /* Check if the cmd is valid. */
            if((cmd_buffer[MARKER_START] == '@') && (cmd_buffer[MARKER_END] == ';'))
 542:	e5 e7       	ldi	r30, 0x75	; 117
 544:	f1 e0       	ldi	r31, 0x01	; 1
            else
            {
               /* Clear cmd_buffer. */
                for(uint8_t i = 0; i < FULL_CMD_CNT; i += 1)
                {
                    cmd_buffer[i] = 0;
 546:	11 92       	st	Z+, r1
                }
            } 
            else
            {
               /* Clear cmd_buffer. */
                for(uint8_t i = 0; i < FULL_CMD_CNT; i += 1)
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	ee 37       	cpi	r30, 0x7E	; 126
 54c:	f8 07       	cpc	r31, r24
 54e:	d9 f7       	brne	.-10     	; 0x546 <WAVE_MainFunction+0xa6>
                    cmd_buffer[i] = 0;
                }
            }

            // Trigger a new reception.
            UART_ReceivePayload(cmd_buffer, FULL_CMD_CNT);
 550:	85 e7       	ldi	r24, 0x75	; 117
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	69 e0       	ldi	r22, 0x09	; 9
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <UART_ReceivePayload>

            UART_SendPayload((uint8_t *)"\r>", 2);
 55c:	82 e6       	ldi	r24, 0x62	; 98
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	0e 94 cf 00 	call	0x19e	; 0x19e <UART_SendPayload>
            while (0 == UART_IsTxComplete());
 568:	0e 94 ee 00 	call	0x1dc	; 0x1dc <UART_IsTxComplete>
 56c:	88 23       	and	r24, r24
 56e:	e1 f3       	breq	.-8      	; 0x568 <WAVE_MainFunction+0xc8>
        }
        case GENERATE_WAVE:
        {
            // Execute waveform..
            if(waveform_index < WAVEFORM_NUM)
 570:	e0 91 65 01 	lds	r30, 0x0165
 574:	e4 30       	cpi	r30, 0x04	; 4
 576:	68 f4       	brcc	.+26     	; 0x592 <WAVE_MainFunction+0xf2>
            {
                waveform[waveform_index](amp_value, freq_value);
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	ee 0f       	add	r30, r30
 57c:	ff 1f       	adc	r31, r31
 57e:	e2 58       	subi	r30, 0x82	; 130
 580:	fe 4f       	sbci	r31, 0xFE	; 254
 582:	01 90       	ld	r0, Z+
 584:	f0 81       	ld	r31, Z
 586:	e0 2d       	mov	r30, r0
 588:	80 91 73 01 	lds	r24, 0x0173
 58c:	60 91 74 01 	lds	r22, 0x0174
 590:	09 95       	icall
            }
            // Keep in generate wave if no command it received.
            currentState = (1 == UART_IsRxComplete()) ? UPDATE_WAVE : GENERATE_WAVE;
 592:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_IsRxComplete>
 596:	10 92 72 01 	sts	0x0172, r1
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	11 f4       	brne	.+4      	; 0x5a2 <WAVE_MainFunction+0x102>
 59e:	80 93 72 01 	sts	0x0172, r24
            break;
        }
        default: {/* Do nothing.*/}
    }
}
 5a2:	0f 90       	pop	r0
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	cf 91       	pop	r28
 5aa:	df 91       	pop	r29
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	08 95       	ret

000005b2 <WAVE_Init>:
        _delay_us(10);
	}
}

void WAVE_Init(void)
{
 5b2:	df 93       	push	r29
 5b4:	cf 93       	push	r28
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <WAVE_Init+0x6>
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <WAVE_Init+0x8>
 5ba:	0f 92       	push	r0
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
    
    /* Init UART driver. */
    UART_cfg my_uart_cfg;
    
    /* Set USART mode. */
    my_uart_cfg.UBRRL_cfg = (BAUD_RATE_VALUE)&0x00FF;
 5c0:	83 e3       	ldi	r24, 0x33	; 51
 5c2:	8a 83       	std	Y+2, r24	; 0x02
    my_uart_cfg.UBRRH_cfg = (((BAUD_RATE_VALUE)&0xFF00)>>8);
 5c4:	19 82       	std	Y+1, r1	; 0x01
    
    my_uart_cfg.UCSRA_cfg = 0;
 5c6:	1b 82       	std	Y+3, r1	; 0x03
    my_uart_cfg.UCSRB_cfg = (1<<RXEN)  | (1<<TXEN) | (1<<TXCIE) | (1<<RXCIE);
 5c8:	88 ed       	ldi	r24, 0xD8	; 216
 5ca:	8c 83       	std	Y+4, r24	; 0x04
    my_uart_cfg.UCSRC_cfg = (1<<URSEL) | (3<<UCSZ0);
 5cc:	86 e8       	ldi	r24, 0x86	; 134
 5ce:	8d 83       	std	Y+5, r24	; 0x05
    
    UART_Init(&my_uart_cfg);
 5d0:	ce 01       	movw	r24, r28
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	0e 94 c3 00 	call	0x186	; 0x186 <UART_Init>
 5d8:	e5 e7       	ldi	r30, 0x75	; 117
 5da:	f1 e0       	ldi	r31, 0x01	; 1
    
    
    /* Clear cmd_buffer. */
    for(i = 0; i < FULL_CMD_CNT; i += 1)
    {
        cmd_buffer[i] = 0;
 5dc:	11 92       	st	Z+, r1
    
    UART_Init(&my_uart_cfg);
    
    
    /* Clear cmd_buffer. */
    for(i = 0; i < FULL_CMD_CNT; i += 1)
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	ee 37       	cpi	r30, 0x7E	; 126
 5e2:	f8 07       	cpc	r31, r24
 5e4:	d9 f7       	brne	.-10     	; 0x5dc <WAVE_Init+0x2a>
    {
        cmd_buffer[i] = 0;
    }
    
    /* Initialize waveform array. */
    waveform[0] = squareWave;
 5e6:	8c e0       	ldi	r24, 0x0C	; 12
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	90 93 7f 01 	sts	0x017F, r25
 5ee:	80 93 7e 01 	sts	0x017E, r24
    waveform[1] = staircaseWave;
 5f2:	85 e1       	ldi	r24, 0x15	; 21
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	90 93 81 01 	sts	0x0181, r25
 5fa:	80 93 80 01 	sts	0x0180, r24
    waveform[2] = triangleWave;
 5fe:	86 e3       	ldi	r24, 0x36	; 54
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	90 93 83 01 	sts	0x0183, r25
 606:	80 93 82 01 	sts	0x0182, r24
    waveform[3] = sineWave;
 60a:	81 e4       	ldi	r24, 0x41	; 65
 60c:	92 e0       	ldi	r25, 0x02	; 2
 60e:	90 93 85 01 	sts	0x0185, r25
 612:	80 93 84 01 	sts	0x0184, r24

    /* Start with getting which wave to generate. */ 
    currentState = UPDATE_WAVE;    
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 72 01 	sts	0x0172, r24
}
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	cf 91       	pop	r28
 628:	df 91       	pop	r29
 62a:	08 95       	ret

0000062c <__cmpsf2>:
 62c:	d4 d0       	rcall	.+424    	; 0x7d6 <__fp_cmp>
 62e:	08 f4       	brcc	.+2      	; 0x632 <__cmpsf2+0x6>
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	08 95       	ret

00000634 <__divsf3>:
 634:	0c d0       	rcall	.+24     	; 0x64e <__divsf3x>
 636:	0a c1       	rjmp	.+532    	; 0x84c <__fp_round>
 638:	02 d1       	rcall	.+516    	; 0x83e <__fp_pscB>
 63a:	40 f0       	brcs	.+16     	; 0x64c <__divsf3+0x18>
 63c:	f9 d0       	rcall	.+498    	; 0x830 <__fp_pscA>
 63e:	30 f0       	brcs	.+12     	; 0x64c <__divsf3+0x18>
 640:	21 f4       	brne	.+8      	; 0x64a <__divsf3+0x16>
 642:	5f 3f       	cpi	r21, 0xFF	; 255
 644:	19 f0       	breq	.+6      	; 0x64c <__divsf3+0x18>
 646:	eb c0       	rjmp	.+470    	; 0x81e <__fp_inf>
 648:	51 11       	cpse	r21, r1
 64a:	34 c1       	rjmp	.+616    	; 0x8b4 <__fp_szero>
 64c:	ee c0       	rjmp	.+476    	; 0x82a <__fp_nan>

0000064e <__divsf3x>:
 64e:	0f d1       	rcall	.+542    	; 0x86e <__fp_split3>
 650:	98 f3       	brcs	.-26     	; 0x638 <__divsf3+0x4>

00000652 <__divsf3_pse>:
 652:	99 23       	and	r25, r25
 654:	c9 f3       	breq	.-14     	; 0x648 <__divsf3+0x14>
 656:	55 23       	and	r21, r21
 658:	b1 f3       	breq	.-20     	; 0x646 <__divsf3+0x12>
 65a:	95 1b       	sub	r25, r21
 65c:	55 0b       	sbc	r21, r21
 65e:	bb 27       	eor	r27, r27
 660:	aa 27       	eor	r26, r26
 662:	62 17       	cp	r22, r18
 664:	73 07       	cpc	r23, r19
 666:	84 07       	cpc	r24, r20
 668:	38 f0       	brcs	.+14     	; 0x678 <__divsf3_pse+0x26>
 66a:	9f 5f       	subi	r25, 0xFF	; 255
 66c:	5f 4f       	sbci	r21, 0xFF	; 255
 66e:	22 0f       	add	r18, r18
 670:	33 1f       	adc	r19, r19
 672:	44 1f       	adc	r20, r20
 674:	aa 1f       	adc	r26, r26
 676:	a9 f3       	breq	.-22     	; 0x662 <__divsf3_pse+0x10>
 678:	33 d0       	rcall	.+102    	; 0x6e0 <__divsf3_pse+0x8e>
 67a:	0e 2e       	mov	r0, r30
 67c:	3a f0       	brmi	.+14     	; 0x68c <__divsf3_pse+0x3a>
 67e:	e0 e8       	ldi	r30, 0x80	; 128
 680:	30 d0       	rcall	.+96     	; 0x6e2 <__divsf3_pse+0x90>
 682:	91 50       	subi	r25, 0x01	; 1
 684:	50 40       	sbci	r21, 0x00	; 0
 686:	e6 95       	lsr	r30
 688:	00 1c       	adc	r0, r0
 68a:	ca f7       	brpl	.-14     	; 0x67e <__divsf3_pse+0x2c>
 68c:	29 d0       	rcall	.+82     	; 0x6e0 <__divsf3_pse+0x8e>
 68e:	fe 2f       	mov	r31, r30
 690:	27 d0       	rcall	.+78     	; 0x6e0 <__divsf3_pse+0x8e>
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	bb 1f       	adc	r27, r27
 69a:	26 17       	cp	r18, r22
 69c:	37 07       	cpc	r19, r23
 69e:	48 07       	cpc	r20, r24
 6a0:	ab 07       	cpc	r26, r27
 6a2:	b0 e8       	ldi	r27, 0x80	; 128
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <__divsf3_pse+0x56>
 6a6:	bb 0b       	sbc	r27, r27
 6a8:	80 2d       	mov	r24, r0
 6aa:	bf 01       	movw	r22, r30
 6ac:	ff 27       	eor	r31, r31
 6ae:	93 58       	subi	r25, 0x83	; 131
 6b0:	5f 4f       	sbci	r21, 0xFF	; 255
 6b2:	2a f0       	brmi	.+10     	; 0x6be <__divsf3_pse+0x6c>
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	51 05       	cpc	r21, r1
 6b8:	68 f0       	brcs	.+26     	; 0x6d4 <__divsf3_pse+0x82>
 6ba:	b1 c0       	rjmp	.+354    	; 0x81e <__fp_inf>
 6bc:	fb c0       	rjmp	.+502    	; 0x8b4 <__fp_szero>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	ec f3       	brlt	.-6      	; 0x6bc <__divsf3_pse+0x6a>
 6c2:	98 3e       	cpi	r25, 0xE8	; 232
 6c4:	dc f3       	brlt	.-10     	; 0x6bc <__divsf3_pse+0x6a>
 6c6:	86 95       	lsr	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	b7 95       	ror	r27
 6ce:	f7 95       	ror	r31
 6d0:	9f 5f       	subi	r25, 0xFF	; 255
 6d2:	c9 f7       	brne	.-14     	; 0x6c6 <__divsf3_pse+0x74>
 6d4:	88 0f       	add	r24, r24
 6d6:	91 1d       	adc	r25, r1
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret
 6e0:	e1 e0       	ldi	r30, 0x01	; 1
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	bb 1f       	adc	r27, r27
 6ea:	62 17       	cp	r22, r18
 6ec:	73 07       	cpc	r23, r19
 6ee:	84 07       	cpc	r24, r20
 6f0:	ba 07       	cpc	r27, r26
 6f2:	20 f0       	brcs	.+8      	; 0x6fc <__divsf3_pse+0xaa>
 6f4:	62 1b       	sub	r22, r18
 6f6:	73 0b       	sbc	r23, r19
 6f8:	84 0b       	sbc	r24, r20
 6fa:	ba 0b       	sbc	r27, r26
 6fc:	ee 1f       	adc	r30, r30
 6fe:	88 f7       	brcc	.-30     	; 0x6e2 <__divsf3_pse+0x90>
 700:	e0 95       	com	r30
 702:	08 95       	ret

00000704 <__fixunssfsi>:
 704:	bc d0       	rcall	.+376    	; 0x87e <__fp_splitA>
 706:	88 f0       	brcs	.+34     	; 0x72a <__fixunssfsi+0x26>
 708:	9f 57       	subi	r25, 0x7F	; 127
 70a:	90 f0       	brcs	.+36     	; 0x730 <__fixunssfsi+0x2c>
 70c:	b9 2f       	mov	r27, r25
 70e:	99 27       	eor	r25, r25
 710:	b7 51       	subi	r27, 0x17	; 23
 712:	a0 f0       	brcs	.+40     	; 0x73c <__fixunssfsi+0x38>
 714:	d1 f0       	breq	.+52     	; 0x74a <__fixunssfsi+0x46>
 716:	66 0f       	add	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	1a f0       	brmi	.+6      	; 0x726 <__fixunssfsi+0x22>
 720:	ba 95       	dec	r27
 722:	c9 f7       	brne	.-14     	; 0x716 <__fixunssfsi+0x12>
 724:	12 c0       	rjmp	.+36     	; 0x74a <__fixunssfsi+0x46>
 726:	b1 30       	cpi	r27, 0x01	; 1
 728:	81 f0       	breq	.+32     	; 0x74a <__fixunssfsi+0x46>
 72a:	c3 d0       	rcall	.+390    	; 0x8b2 <__fp_zero>
 72c:	b1 e0       	ldi	r27, 0x01	; 1
 72e:	08 95       	ret
 730:	c0 c0       	rjmp	.+384    	; 0x8b2 <__fp_zero>
 732:	67 2f       	mov	r22, r23
 734:	78 2f       	mov	r23, r24
 736:	88 27       	eor	r24, r24
 738:	b8 5f       	subi	r27, 0xF8	; 248
 73a:	39 f0       	breq	.+14     	; 0x74a <__fixunssfsi+0x46>
 73c:	b9 3f       	cpi	r27, 0xF9	; 249
 73e:	cc f3       	brlt	.-14     	; 0x732 <__fixunssfsi+0x2e>
 740:	86 95       	lsr	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b3 95       	inc	r27
 748:	d9 f7       	brne	.-10     	; 0x740 <__fixunssfsi+0x3c>
 74a:	3e f4       	brtc	.+14     	; 0x75a <__fixunssfsi+0x56>
 74c:	90 95       	com	r25
 74e:	80 95       	com	r24
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__floatunsisf>:
 75c:	e8 94       	clt
 75e:	09 c0       	rjmp	.+18     	; 0x772 <__floatsisf+0x12>

00000760 <__floatsisf>:
 760:	97 fb       	bst	r25, 7
 762:	3e f4       	brtc	.+14     	; 0x772 <__floatsisf+0x12>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	99 23       	and	r25, r25
 774:	a9 f0       	breq	.+42     	; 0x7a0 <__floatsisf+0x40>
 776:	f9 2f       	mov	r31, r25
 778:	96 e9       	ldi	r25, 0x96	; 150
 77a:	bb 27       	eor	r27, r27
 77c:	93 95       	inc	r25
 77e:	f6 95       	lsr	r31
 780:	87 95       	ror	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b7 95       	ror	r27
 788:	f1 11       	cpse	r31, r1
 78a:	f8 cf       	rjmp	.-16     	; 0x77c <__floatsisf+0x1c>
 78c:	fa f4       	brpl	.+62     	; 0x7cc <__floatsisf+0x6c>
 78e:	bb 0f       	add	r27, r27
 790:	11 f4       	brne	.+4      	; 0x796 <__floatsisf+0x36>
 792:	60 ff       	sbrs	r22, 0
 794:	1b c0       	rjmp	.+54     	; 0x7cc <__floatsisf+0x6c>
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <__floatsisf+0x6c>
 7a0:	88 23       	and	r24, r24
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <__floatsisf+0x48>
 7a4:	96 e9       	ldi	r25, 0x96	; 150
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <__floatsisf+0x6a>
 7a8:	77 23       	and	r23, r23
 7aa:	21 f0       	breq	.+8      	; 0x7b4 <__floatsisf+0x54>
 7ac:	9e e8       	ldi	r25, 0x8E	; 142
 7ae:	87 2f       	mov	r24, r23
 7b0:	76 2f       	mov	r23, r22
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <__floatsisf+0x5e>
 7b4:	66 23       	and	r22, r22
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <__floatsisf+0x74>
 7b8:	96 e8       	ldi	r25, 0x86	; 134
 7ba:	86 2f       	mov	r24, r22
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	2a f0       	brmi	.+10     	; 0x7cc <__floatsisf+0x6c>
 7c2:	9a 95       	dec	r25
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	da f7       	brpl	.-10     	; 0x7c2 <__floatsisf+0x62>
 7cc:	88 0f       	add	r24, r24
 7ce:	96 95       	lsr	r25
 7d0:	87 95       	ror	r24
 7d2:	97 f9       	bld	r25, 7
 7d4:	08 95       	ret

000007d6 <__fp_cmp>:
 7d6:	99 0f       	add	r25, r25
 7d8:	00 08       	sbc	r0, r0
 7da:	55 0f       	add	r21, r21
 7dc:	aa 0b       	sbc	r26, r26
 7de:	e0 e8       	ldi	r30, 0x80	; 128
 7e0:	fe ef       	ldi	r31, 0xFE	; 254
 7e2:	16 16       	cp	r1, r22
 7e4:	17 06       	cpc	r1, r23
 7e6:	e8 07       	cpc	r30, r24
 7e8:	f9 07       	cpc	r31, r25
 7ea:	c0 f0       	brcs	.+48     	; 0x81c <__fp_cmp+0x46>
 7ec:	12 16       	cp	r1, r18
 7ee:	13 06       	cpc	r1, r19
 7f0:	e4 07       	cpc	r30, r20
 7f2:	f5 07       	cpc	r31, r21
 7f4:	98 f0       	brcs	.+38     	; 0x81c <__fp_cmp+0x46>
 7f6:	62 1b       	sub	r22, r18
 7f8:	73 0b       	sbc	r23, r19
 7fa:	84 0b       	sbc	r24, r20
 7fc:	95 0b       	sbc	r25, r21
 7fe:	39 f4       	brne	.+14     	; 0x80e <__fp_cmp+0x38>
 800:	0a 26       	eor	r0, r26
 802:	61 f0       	breq	.+24     	; 0x81c <__fp_cmp+0x46>
 804:	23 2b       	or	r18, r19
 806:	24 2b       	or	r18, r20
 808:	25 2b       	or	r18, r21
 80a:	21 f4       	brne	.+8      	; 0x814 <__fp_cmp+0x3e>
 80c:	08 95       	ret
 80e:	0a 26       	eor	r0, r26
 810:	09 f4       	brne	.+2      	; 0x814 <__fp_cmp+0x3e>
 812:	a1 40       	sbci	r26, 0x01	; 1
 814:	a6 95       	lsr	r26
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	81 1d       	adc	r24, r1
 81a:	81 1d       	adc	r24, r1
 81c:	08 95       	ret

0000081e <__fp_inf>:
 81e:	97 f9       	bld	r25, 7
 820:	9f 67       	ori	r25, 0x7F	; 127
 822:	80 e8       	ldi	r24, 0x80	; 128
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	08 95       	ret

0000082a <__fp_nan>:
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	80 ec       	ldi	r24, 0xC0	; 192
 82e:	08 95       	ret

00000830 <__fp_pscA>:
 830:	00 24       	eor	r0, r0
 832:	0a 94       	dec	r0
 834:	16 16       	cp	r1, r22
 836:	17 06       	cpc	r1, r23
 838:	18 06       	cpc	r1, r24
 83a:	09 06       	cpc	r0, r25
 83c:	08 95       	ret

0000083e <__fp_pscB>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	05 06       	cpc	r0, r21
 84a:	08 95       	ret

0000084c <__fp_round>:
 84c:	09 2e       	mov	r0, r25
 84e:	03 94       	inc	r0
 850:	00 0c       	add	r0, r0
 852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0xc>
 854:	88 23       	and	r24, r24
 856:	52 f0       	brmi	.+20     	; 0x86c <__fp_round+0x20>
 858:	bb 0f       	add	r27, r27
 85a:	40 f4       	brcc	.+16     	; 0x86c <__fp_round+0x20>
 85c:	bf 2b       	or	r27, r31
 85e:	11 f4       	brne	.+4      	; 0x864 <__fp_round+0x18>
 860:	60 ff       	sbrs	r22, 0
 862:	04 c0       	rjmp	.+8      	; 0x86c <__fp_round+0x20>
 864:	6f 5f       	subi	r22, 0xFF	; 255
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	08 95       	ret

0000086e <__fp_split3>:
 86e:	57 fd       	sbrc	r21, 7
 870:	90 58       	subi	r25, 0x80	; 128
 872:	44 0f       	add	r20, r20
 874:	55 1f       	adc	r21, r21
 876:	59 f0       	breq	.+22     	; 0x88e <__fp_splitA+0x10>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	71 f0       	breq	.+28     	; 0x898 <__fp_splitA+0x1a>
 87c:	47 95       	ror	r20

0000087e <__fp_splitA>:
 87e:	88 0f       	add	r24, r24
 880:	97 fb       	bst	r25, 7
 882:	99 1f       	adc	r25, r25
 884:	61 f0       	breq	.+24     	; 0x89e <__fp_splitA+0x20>
 886:	9f 3f       	cpi	r25, 0xFF	; 255
 888:	79 f0       	breq	.+30     	; 0x8a8 <__fp_splitA+0x2a>
 88a:	87 95       	ror	r24
 88c:	08 95       	ret
 88e:	12 16       	cp	r1, r18
 890:	13 06       	cpc	r1, r19
 892:	14 06       	cpc	r1, r20
 894:	55 1f       	adc	r21, r21
 896:	f2 cf       	rjmp	.-28     	; 0x87c <__fp_split3+0xe>
 898:	46 95       	lsr	r20
 89a:	f1 df       	rcall	.-30     	; 0x87e <__fp_splitA>
 89c:	08 c0       	rjmp	.+16     	; 0x8ae <__fp_splitA+0x30>
 89e:	16 16       	cp	r1, r22
 8a0:	17 06       	cpc	r1, r23
 8a2:	18 06       	cpc	r1, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	f1 cf       	rjmp	.-30     	; 0x88a <__fp_splitA+0xc>
 8a8:	86 95       	lsr	r24
 8aa:	71 05       	cpc	r23, r1
 8ac:	61 05       	cpc	r22, r1
 8ae:	08 94       	sec
 8b0:	08 95       	ret

000008b2 <__fp_zero>:
 8b2:	e8 94       	clt

000008b4 <__fp_szero>:
 8b4:	bb 27       	eor	r27, r27
 8b6:	66 27       	eor	r22, r22
 8b8:	77 27       	eor	r23, r23
 8ba:	cb 01       	movw	r24, r22
 8bc:	97 f9       	bld	r25, 7
 8be:	08 95       	ret

000008c0 <__gesf2>:
 8c0:	8a df       	rcall	.-236    	; 0x7d6 <__fp_cmp>
 8c2:	08 f4       	brcc	.+2      	; 0x8c6 <__gesf2+0x6>
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__mulsf3>:
 8c8:	0b d0       	rcall	.+22     	; 0x8e0 <__mulsf3x>
 8ca:	c0 cf       	rjmp	.-128    	; 0x84c <__fp_round>
 8cc:	b1 df       	rcall	.-158    	; 0x830 <__fp_pscA>
 8ce:	28 f0       	brcs	.+10     	; 0x8da <__mulsf3+0x12>
 8d0:	b6 df       	rcall	.-148    	; 0x83e <__fp_pscB>
 8d2:	18 f0       	brcs	.+6      	; 0x8da <__mulsf3+0x12>
 8d4:	95 23       	and	r25, r21
 8d6:	09 f0       	breq	.+2      	; 0x8da <__mulsf3+0x12>
 8d8:	a2 cf       	rjmp	.-188    	; 0x81e <__fp_inf>
 8da:	a7 cf       	rjmp	.-178    	; 0x82a <__fp_nan>
 8dc:	11 24       	eor	r1, r1
 8de:	ea cf       	rjmp	.-44     	; 0x8b4 <__fp_szero>

000008e0 <__mulsf3x>:
 8e0:	c6 df       	rcall	.-116    	; 0x86e <__fp_split3>
 8e2:	a0 f3       	brcs	.-24     	; 0x8cc <__mulsf3+0x4>

000008e4 <__mulsf3_pse>:
 8e4:	95 9f       	mul	r25, r21
 8e6:	d1 f3       	breq	.-12     	; 0x8dc <__mulsf3+0x14>
 8e8:	95 0f       	add	r25, r21
 8ea:	50 e0       	ldi	r21, 0x00	; 0
 8ec:	55 1f       	adc	r21, r21
 8ee:	62 9f       	mul	r22, r18
 8f0:	f0 01       	movw	r30, r0
 8f2:	72 9f       	mul	r23, r18
 8f4:	bb 27       	eor	r27, r27
 8f6:	f0 0d       	add	r31, r0
 8f8:	b1 1d       	adc	r27, r1
 8fa:	63 9f       	mul	r22, r19
 8fc:	aa 27       	eor	r26, r26
 8fe:	f0 0d       	add	r31, r0
 900:	b1 1d       	adc	r27, r1
 902:	aa 1f       	adc	r26, r26
 904:	64 9f       	mul	r22, r20
 906:	66 27       	eor	r22, r22
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	66 1f       	adc	r22, r22
 90e:	82 9f       	mul	r24, r18
 910:	22 27       	eor	r18, r18
 912:	b0 0d       	add	r27, r0
 914:	a1 1d       	adc	r26, r1
 916:	62 1f       	adc	r22, r18
 918:	73 9f       	mul	r23, r19
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	62 1f       	adc	r22, r18
 920:	83 9f       	mul	r24, r19
 922:	a0 0d       	add	r26, r0
 924:	61 1d       	adc	r22, r1
 926:	22 1f       	adc	r18, r18
 928:	74 9f       	mul	r23, r20
 92a:	33 27       	eor	r19, r19
 92c:	a0 0d       	add	r26, r0
 92e:	61 1d       	adc	r22, r1
 930:	23 1f       	adc	r18, r19
 932:	84 9f       	mul	r24, r20
 934:	60 0d       	add	r22, r0
 936:	21 1d       	adc	r18, r1
 938:	82 2f       	mov	r24, r18
 93a:	76 2f       	mov	r23, r22
 93c:	6a 2f       	mov	r22, r26
 93e:	11 24       	eor	r1, r1
 940:	9f 57       	subi	r25, 0x7F	; 127
 942:	50 40       	sbci	r21, 0x00	; 0
 944:	8a f0       	brmi	.+34     	; 0x968 <__mulsf3_pse+0x84>
 946:	e1 f0       	breq	.+56     	; 0x980 <__mulsf3_pse+0x9c>
 948:	88 23       	and	r24, r24
 94a:	4a f0       	brmi	.+18     	; 0x95e <__mulsf3_pse+0x7a>
 94c:	ee 0f       	add	r30, r30
 94e:	ff 1f       	adc	r31, r31
 950:	bb 1f       	adc	r27, r27
 952:	66 1f       	adc	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	91 50       	subi	r25, 0x01	; 1
 95a:	50 40       	sbci	r21, 0x00	; 0
 95c:	a9 f7       	brne	.-22     	; 0x948 <__mulsf3_pse+0x64>
 95e:	9e 3f       	cpi	r25, 0xFE	; 254
 960:	51 05       	cpc	r21, r1
 962:	70 f0       	brcs	.+28     	; 0x980 <__mulsf3_pse+0x9c>
 964:	5c cf       	rjmp	.-328    	; 0x81e <__fp_inf>
 966:	a6 cf       	rjmp	.-180    	; 0x8b4 <__fp_szero>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	ec f3       	brlt	.-6      	; 0x966 <__mulsf3_pse+0x82>
 96c:	98 3e       	cpi	r25, 0xE8	; 232
 96e:	dc f3       	brlt	.-10     	; 0x966 <__mulsf3_pse+0x82>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b7 95       	ror	r27
 978:	f7 95       	ror	r31
 97a:	e7 95       	ror	r30
 97c:	9f 5f       	subi	r25, 0xFF	; 255
 97e:	c1 f7       	brne	.-16     	; 0x970 <__mulsf3_pse+0x8c>
 980:	fe 2b       	or	r31, r30
 982:	88 0f       	add	r24, r24
 984:	91 1d       	adc	r25, r1
 986:	96 95       	lsr	r25
 988:	87 95       	ror	r24
 98a:	97 f9       	bld	r25, 7
 98c:	08 95       	ret

0000098e <atoi>:
 98e:	fc 01       	movw	r30, r24
 990:	88 27       	eor	r24, r24
 992:	99 27       	eor	r25, r25
 994:	e8 94       	clt
 996:	21 91       	ld	r18, Z+
 998:	20 32       	cpi	r18, 0x20	; 32
 99a:	e9 f3       	breq	.-6      	; 0x996 <atoi+0x8>
 99c:	29 30       	cpi	r18, 0x09	; 9
 99e:	10 f0       	brcs	.+4      	; 0x9a4 <atoi+0x16>
 9a0:	2e 30       	cpi	r18, 0x0E	; 14
 9a2:	c8 f3       	brcs	.-14     	; 0x996 <atoi+0x8>
 9a4:	2b 32       	cpi	r18, 0x2B	; 43
 9a6:	41 f0       	breq	.+16     	; 0x9b8 <atoi+0x2a>
 9a8:	2d 32       	cpi	r18, 0x2D	; 45
 9aa:	39 f4       	brne	.+14     	; 0x9ba <atoi+0x2c>
 9ac:	68 94       	set
 9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <atoi+0x2a>
 9b0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulhi_const_10>
 9b4:	82 0f       	add	r24, r18
 9b6:	91 1d       	adc	r25, r1
 9b8:	21 91       	ld	r18, Z+
 9ba:	20 53       	subi	r18, 0x30	; 48
 9bc:	2a 30       	cpi	r18, 0x0A	; 10
 9be:	c0 f3       	brcs	.-16     	; 0x9b0 <atoi+0x22>
 9c0:	1e f4       	brtc	.+6      	; 0x9c8 <atoi+0x3a>
 9c2:	90 95       	com	r25
 9c4:	81 95       	neg	r24
 9c6:	9f 4f       	sbci	r25, 0xFF	; 255
 9c8:	08 95       	ret

000009ca <__mulhi_const_10>:
 9ca:	7a e0       	ldi	r23, 0x0A	; 10
 9cc:	97 9f       	mul	r25, r23
 9ce:	90 2d       	mov	r25, r0
 9d0:	87 9f       	mul	r24, r23
 9d2:	80 2d       	mov	r24, r0
 9d4:	91 0d       	add	r25, r1
 9d6:	11 24       	eor	r1, r1
 9d8:	08 95       	ret

000009da <_exit>:
 9da:	f8 94       	cli

000009dc <__stop_program>:
 9dc:	ff cf       	rjmp	.-2      	; 0x9dc <__stop_program>
