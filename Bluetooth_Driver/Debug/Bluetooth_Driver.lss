
Bluetooth_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000029fe  00002a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  00002aa4  2**0
                  ALLOC
  3 .stab         00002250  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e7  00000000  00000000  00004cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000608b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000996c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__vector_13>
      38:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__vector_14>
      3c:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <main>
      8a:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BT_voidInit>:

#include"BT_Config.h"
#include"LCD.h"
#include<avr/delay.h>
#include<stdlib.h>
void BT_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UART_voidInit();
     b4e:	0e 94 8c 11 	call	0x2318	; 0x2318 <UART_voidInit>
}
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <BT_u8ReciveChar>:

U8 BT_u8ReciveChar(void){
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
	return UART_u8Recive();
     b60:	0e 94 c1 11 	call	0x2382	; 0x2382 <UART_u8Recive>
}
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <BT_voidTransmitChar>:
////	_delay_ms(2000);
//
//	return *word;
//
//}
void BT_voidTransmitChar(U8 const charToSend){
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	0f 92       	push	r0
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	89 83       	std	Y+1, r24	; 0x01
	UART_voidTransmit(charToSend);
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <UART_voidTransmit>
}
     b7c:	0f 90       	pop	r0
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <BT_voidTransmitString>:

void BT_voidTransmitString(U8* const stringToSend){
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	00 d0       	rcall	.+0      	; 0xb8a <BT_voidTransmitString+0x6>
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	9b 83       	std	Y+3, r25	; 0x03
     b92:	8a 83       	std	Y+2, r24	; 0x02

	U8 index =0;
     b94:	19 82       	std	Y+1, r1	; 0x01
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <BT_voidTransmitString+0x30>

	while(stringToSend[index] != '\0')
	{
		/* write char on LCD */
		UART_voidTransmit(stringToSend[index]);
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	9b 81       	ldd	r25, Y+3	; 0x03
     ba2:	fc 01       	movw	r30, r24
     ba4:	e2 0f       	add	r30, r18
     ba6:	f3 1f       	adc	r31, r19
     ba8:	80 81       	ld	r24, Z
     baa:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <UART_voidTransmit>

		/* next char */
		index++;
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	8f 5f       	subi	r24, 0xFF	; 255
     bb2:	89 83       	std	Y+1, r24	; 0x01

void BT_voidTransmitString(U8* const stringToSend){

	U8 index =0;

	while(stringToSend[index] != '\0')
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	9b 81       	ldd	r25, Y+3	; 0x03
     bbe:	fc 01       	movw	r30, r24
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	80 81       	ld	r24, Z
     bc6:	88 23       	and	r24, r24
     bc8:	39 f7       	brne	.-50     	; 0xb98 <BT_voidTransmitString+0x14>

		/* next char */
		index++;

	}	/* end While */
}
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <DIO_voidSetPinDirection>:

/*
 *  States the Direction of the PIN: INPUT/OUTPUT
 */
extern void DIO_voidSetPinDirection(U8 DIO_u8LocalPinToSet, U8 DIO_u8DIOLocalDirection)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	00 d0       	rcall	.+0      	; 0xbdc <DIO_voidSetPinDirection+0x6>
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	6a 83       	std	Y+2, r22	; 0x02
	if((DIO_u8LocalPinToSet>=0 && DIO_u8LocalPinToSet<=31) && (DIO_u8DIOLocalDirection==0 || DIO_u8DIOLocalDirection==1))
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	80 32       	cpi	r24, 0x20	; 32
     be8:	08 f0       	brcs	.+2      	; 0xbec <DIO_voidSetPinDirection+0x16>
     bea:	cd c0       	rjmp	.+410    	; 0xd86 <DIO_voidSetPinDirection+0x1b0>
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	88 23       	and	r24, r24
     bf0:	21 f0       	breq	.+8      	; 0xbfa <DIO_voidSetPinDirection+0x24>
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	09 f0       	breq	.+2      	; 0xbfa <DIO_voidSetPinDirection+0x24>
     bf8:	c6 c0       	rjmp	.+396    	; 0xd86 <DIO_voidSetPinDirection+0x1b0>
	{
		if( (DIO_u8LocalPinToSet / 8) == 0)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	70 f5       	brcc	.+92     	; 0xc5c <DIO_voidSetPinDirection+0x86>
		{
			assign_bit(DDRA, (DIO_u8LocalPinToSet %8), DIO_u8DIOLocalDirection);
     c00:	aa e3       	ldi	r26, 0x3A	; 58
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	ea e3       	ldi	r30, 0x3A	; 58
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9c 01       	movw	r18, r24
     c14:	27 70       	andi	r18, 0x07	; 7
     c16:	30 70       	andi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_voidSetPinDirection+0x4c>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	2a 95       	dec	r18
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_voidSetPinDirection+0x48>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	aa e3       	ldi	r26, 0x3A	; 58
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	ea e3       	ldi	r30, 0x3A	; 58
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	48 2f       	mov	r20, r24
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	87 70       	andi	r24, 0x07	; 7
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	b9 01       	movw	r22, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_voidSetPinDirection+0x7a>
     c4c:	66 0f       	add	r22, r22
     c4e:	77 1f       	adc	r23, r23
     c50:	8a 95       	dec	r24
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_voidSetPinDirection+0x76>
     c54:	cb 01       	movw	r24, r22
     c56:	84 2b       	or	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	95 c0       	rjmp	.+298    	; 0xd86 <DIO_voidSetPinDirection+0x1b0>
		}
		else if ( (DIO_u8LocalPinToSet / 8) == 1)
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	88 50       	subi	r24, 0x08	; 8
     c60:	88 30       	cpi	r24, 0x08	; 8
     c62:	70 f5       	brcc	.+92     	; 0xcc0 <DIO_voidSetPinDirection+0xea>
		{
			assign_bit(DDRB, (DIO_u8LocalPinToSet %8), DIO_u8DIOLocalDirection);
     c64:	a7 e3       	ldi	r26, 0x37	; 55
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e7 e3       	ldi	r30, 0x37	; 55
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9c 01       	movw	r18, r24
     c78:	27 70       	andi	r18, 0x07	; 7
     c7a:	30 70       	andi	r19, 0x00	; 0
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_voidSetPinDirection+0xb0>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	2a 95       	dec	r18
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_voidSetPinDirection+0xac>
     c8a:	80 95       	com	r24
     c8c:	84 23       	and	r24, r20
     c8e:	8c 93       	st	X, r24
     c90:	a7 e3       	ldi	r26, 0x37	; 55
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e7 e3       	ldi	r30, 0x37	; 55
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	48 2f       	mov	r20, r24
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	87 70       	andi	r24, 0x07	; 7
     caa:	90 70       	andi	r25, 0x00	; 0
     cac:	b9 01       	movw	r22, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_voidSetPinDirection+0xde>
     cb0:	66 0f       	add	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	8a 95       	dec	r24
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_voidSetPinDirection+0xda>
     cb8:	cb 01       	movw	r24, r22
     cba:	84 2b       	or	r24, r20
     cbc:	8c 93       	st	X, r24
     cbe:	63 c0       	rjmp	.+198    	; 0xd86 <DIO_voidSetPinDirection+0x1b0>
		}
		else if ( (DIO_u8LocalPinToSet / 8) == 2)
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	80 51       	subi	r24, 0x10	; 16
     cc4:	88 30       	cpi	r24, 0x08	; 8
     cc6:	70 f5       	brcc	.+92     	; 0xd24 <DIO_voidSetPinDirection+0x14e>
		{
			assign_bit(DDRC, (DIO_u8LocalPinToSet %8), DIO_u8DIOLocalDirection);
     cc8:	a4 e3       	ldi	r26, 0x34	; 52
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e4 e3       	ldi	r30, 0x34	; 52
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	9c 01       	movw	r18, r24
     cdc:	27 70       	andi	r18, 0x07	; 7
     cde:	30 70       	andi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_voidSetPinDirection+0x114>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	2a 95       	dec	r18
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_voidSetPinDirection+0x110>
     cee:	80 95       	com	r24
     cf0:	84 23       	and	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	a4 e3       	ldi	r26, 0x34	; 52
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e4 e3       	ldi	r30, 0x34	; 52
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	87 70       	andi	r24, 0x07	; 7
     d0e:	90 70       	andi	r25, 0x00	; 0
     d10:	b9 01       	movw	r22, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <DIO_voidSetPinDirection+0x142>
     d14:	66 0f       	add	r22, r22
     d16:	77 1f       	adc	r23, r23
     d18:	8a 95       	dec	r24
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <DIO_voidSetPinDirection+0x13e>
     d1c:	cb 01       	movw	r24, r22
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	31 c0       	rjmp	.+98     	; 0xd86 <DIO_voidSetPinDirection+0x1b0>
		}
		else if ( (DIO_u8LocalPinToSet / 8) == 3)
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	88 51       	subi	r24, 0x18	; 24
     d28:	88 30       	cpi	r24, 0x08	; 8
     d2a:	68 f5       	brcc	.+90     	; 0xd86 <DIO_voidSetPinDirection+0x1b0>
		{
			assign_bit(DDRD, (DIO_u8LocalPinToSet %8), DIO_u8DIOLocalDirection);
     d2c:	a1 e3       	ldi	r26, 0x31	; 49
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e1 e3       	ldi	r30, 0x31	; 49
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9c 01       	movw	r18, r24
     d40:	27 70       	andi	r18, 0x07	; 7
     d42:	30 70       	andi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_voidSetPinDirection+0x178>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	2a 95       	dec	r18
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_voidSetPinDirection+0x174>
     d52:	80 95       	com	r24
     d54:	84 23       	and	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	a1 e3       	ldi	r26, 0x31	; 49
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e1 e3       	ldi	r30, 0x31	; 49
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	87 70       	andi	r24, 0x07	; 7
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	b9 01       	movw	r22, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_voidSetPinDirection+0x1a6>
     d78:	66 0f       	add	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	8a 95       	dec	r24
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_voidSetPinDirection+0x1a2>
     d80:	cb 01       	movw	r24, r22
     d82:	84 2b       	or	r24, r20
     d84:	8c 93       	st	X, r24
		}
	} /* end if */
} /*end function */
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <DIO_voidWritePin>:

/*
 *  States the Value of the PIN: HIGH/LOW
 */
extern void DIO_voidWritePin(U8 DIO_u8LocalPinToSet, U8 DIO_u8DIOLocalValue)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	00 d0       	rcall	.+0      	; 0xd96 <DIO_voidWritePin+0x6>
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	6a 83       	std	Y+2, r22	; 0x02
	if((DIO_u8LocalPinToSet>=0 && DIO_u8LocalPinToSet<=31) && (DIO_u8DIOLocalValue==0 || DIO_u8DIOLocalValue==1))
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	80 32       	cpi	r24, 0x20	; 32
     da2:	08 f0       	brcs	.+2      	; 0xda6 <DIO_voidWritePin+0x16>
     da4:	cd c0       	rjmp	.+410    	; 0xf40 <DIO_voidWritePin+0x1b0>
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	88 23       	and	r24, r24
     daa:	21 f0       	breq	.+8      	; 0xdb4 <DIO_voidWritePin+0x24>
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	09 f0       	breq	.+2      	; 0xdb4 <DIO_voidWritePin+0x24>
     db2:	c6 c0       	rjmp	.+396    	; 0xf40 <DIO_voidWritePin+0x1b0>
	{
		if( (DIO_u8LocalPinToSet / 8) == 0)
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	88 30       	cpi	r24, 0x08	; 8
     db8:	70 f5       	brcc	.+92     	; 0xe16 <DIO_voidWritePin+0x86>
		{
			assign_bit(PORTA, (DIO_u8LocalPinToSet % 8), DIO_u8DIOLocalValue);
     dba:	ab e3       	ldi	r26, 0x3B	; 59
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9c 01       	movw	r18, r24
     dce:	27 70       	andi	r18, 0x07	; 7
     dd0:	30 70       	andi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_voidWritePin+0x4c>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	2a 95       	dec	r18
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_voidWritePin+0x48>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	ab e3       	ldi	r26, 0x3B	; 59
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	eb e3       	ldi	r30, 0x3B	; 59
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	87 70       	andi	r24, 0x07	; 7
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	b9 01       	movw	r22, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_voidWritePin+0x7a>
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	8a 95       	dec	r24
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_voidWritePin+0x76>
     e0e:	cb 01       	movw	r24, r22
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	95 c0       	rjmp	.+298    	; 0xf40 <DIO_voidWritePin+0x1b0>
		}
		else if ( (DIO_u8LocalPinToSet / 8) == 1)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	88 50       	subi	r24, 0x08	; 8
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	70 f5       	brcc	.+92     	; 0xe7a <DIO_voidWritePin+0xea>
		{
			assign_bit(PORTB, (DIO_u8LocalPinToSet % 8), DIO_u8DIOLocalValue);
     e1e:	a8 e3       	ldi	r26, 0x38	; 56
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e3       	ldi	r30, 0x38	; 56
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9c 01       	movw	r18, r24
     e32:	27 70       	andi	r18, 0x07	; 7
     e34:	30 70       	andi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_voidWritePin+0xb0>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	2a 95       	dec	r18
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_voidWritePin+0xac>
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	a8 e3       	ldi	r26, 0x38	; 56
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e8 e3       	ldi	r30, 0x38	; 56
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	87 70       	andi	r24, 0x07	; 7
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	b9 01       	movw	r22, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_voidWritePin+0xde>
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	8a 95       	dec	r24
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_voidWritePin+0xda>
     e72:	cb 01       	movw	r24, r22
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	63 c0       	rjmp	.+198    	; 0xf40 <DIO_voidWritePin+0x1b0>
		}
		else if ( (DIO_u8LocalPinToSet / 8) == 2)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	80 51       	subi	r24, 0x10	; 16
     e7e:	88 30       	cpi	r24, 0x08	; 8
     e80:	70 f5       	brcc	.+92     	; 0xede <DIO_voidWritePin+0x14e>
		{
			assign_bit(PORTC, (DIO_u8LocalPinToSet % 8), DIO_u8DIOLocalValue);
     e82:	a5 e3       	ldi	r26, 0x35	; 53
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e3       	ldi	r30, 0x35	; 53
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9c 01       	movw	r18, r24
     e96:	27 70       	andi	r18, 0x07	; 7
     e98:	30 70       	andi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_voidWritePin+0x114>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	2a 95       	dec	r18
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_voidWritePin+0x110>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	a5 e3       	ldi	r26, 0x35	; 53
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e3       	ldi	r30, 0x35	; 53
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	87 70       	andi	r24, 0x07	; 7
     ec8:	90 70       	andi	r25, 0x00	; 0
     eca:	b9 01       	movw	r22, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_voidWritePin+0x142>
     ece:	66 0f       	add	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	8a 95       	dec	r24
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_voidWritePin+0x13e>
     ed6:	cb 01       	movw	r24, r22
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	31 c0       	rjmp	.+98     	; 0xf40 <DIO_voidWritePin+0x1b0>
		}
		else if ( (DIO_u8LocalPinToSet / 8) == 3)
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	88 51       	subi	r24, 0x18	; 24
     ee2:	88 30       	cpi	r24, 0x08	; 8
     ee4:	68 f5       	brcc	.+90     	; 0xf40 <DIO_voidWritePin+0x1b0>
		{
			assign_bit(PORTD, (DIO_u8LocalPinToSet %8), DIO_u8DIOLocalValue);
     ee6:	a2 e3       	ldi	r26, 0x32	; 50
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e2 e3       	ldi	r30, 0x32	; 50
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 01       	movw	r18, r24
     efa:	27 70       	andi	r18, 0x07	; 7
     efc:	30 70       	andi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_voidWritePin+0x178>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	2a 95       	dec	r18
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_voidWritePin+0x174>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	a2 e3       	ldi	r26, 0x32	; 50
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e2 e3       	ldi	r30, 0x32	; 50
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	87 70       	andi	r24, 0x07	; 7
     f2c:	90 70       	andi	r25, 0x00	; 0
     f2e:	b9 01       	movw	r22, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_voidWritePin+0x1a6>
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	8a 95       	dec	r24
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_voidWritePin+0x1a2>
     f3a:	cb 01       	movw	r24, r22
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
		}
	}/* end if */
}/* end function */
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <DIO_u8ReadPin>:

/*
 *  Reads the Value of the PIN: HIGH/LOW
 */
extern U8 DIO_u8ReadPin(U8 DIO_u8LocalPintToRead)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_u8ReadPin+0x6>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
	U8 DIO_u8DataToBeRead;
	if((DIO_u8LocalPintToRead>=0) && (DIO_u8LocalPintToRead<=31))
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <DIO_u8ReadPin+0x14>
     f5c:	9a c0       	rjmp	.+308    	; 0x1092 <DIO_u8ReadPin+0x148>
	{
		if( (DIO_u8LocalPintToRead/8) == 0)
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	88 30       	cpi	r24, 0x08	; 8
     f62:	18 f5       	brcc	.+70     	; 0xfaa <DIO_u8ReadPin+0x60>
		{
			DIO_u8DataToBeRead = get_bit(PINA,(DIO_u8LocalPintToRead%8) );
     f64:	e9 e3       	ldi	r30, 0x39	; 57
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9c 01       	movw	r18, r24
     f76:	27 70       	andi	r18, 0x07	; 7
     f78:	30 70       	andi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_u8ReadPin+0x3a>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	2a 95       	dec	r18
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_u8ReadPin+0x36>
     f88:	9a 01       	movw	r18, r20
     f8a:	28 23       	and	r18, r24
     f8c:	39 23       	and	r19, r25
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	87 70       	andi	r24, 0x07	; 7
     f96:	90 70       	andi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_u8ReadPin+0x56>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_u8ReadPin+0x52>
     fa4:	ca 01       	movw	r24, r20
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	74 c0       	rjmp	.+232    	; 0x1092 <DIO_u8ReadPin+0x148>
		}
		else if((DIO_u8LocalPintToRead/8) == 1)
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	88 50       	subi	r24, 0x08	; 8
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	18 f5       	brcc	.+70     	; 0xff8 <DIO_u8ReadPin+0xae>
		{
			DIO_u8DataToBeRead = get_bit(PINB,(DIO_u8LocalPintToRead%8) );
     fb2:	e6 e3       	ldi	r30, 0x36	; 54
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9c 01       	movw	r18, r24
     fc4:	27 70       	andi	r18, 0x07	; 7
     fc6:	30 70       	andi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_u8ReadPin+0x88>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	2a 95       	dec	r18
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_u8ReadPin+0x84>
     fd6:	9a 01       	movw	r18, r20
     fd8:	28 23       	and	r18, r24
     fda:	39 23       	and	r19, r25
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	87 70       	andi	r24, 0x07	; 7
     fe4:	90 70       	andi	r25, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_u8ReadPin+0xa4>
     fea:	55 95       	asr	r21
     fec:	47 95       	ror	r20
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_u8ReadPin+0xa0>
     ff2:	ca 01       	movw	r24, r20
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	4d c0       	rjmp	.+154    	; 0x1092 <DIO_u8ReadPin+0x148>
		}
		else if((DIO_u8LocalPintToRead/8) == 2)
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	80 51       	subi	r24, 0x10	; 16
     ffc:	88 30       	cpi	r24, 0x08	; 8
     ffe:	18 f5       	brcc	.+70     	; 0x1046 <DIO_u8ReadPin+0xfc>
		{
			DIO_u8DataToBeRead = get_bit(PINC,(DIO_u8LocalPintToRead%8) );
    1000:	e3 e3       	ldi	r30, 0x33	; 51
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9c 01       	movw	r18, r24
    1012:	27 70       	andi	r18, 0x07	; 7
    1014:	30 70       	andi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_u8ReadPin+0xd6>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	2a 95       	dec	r18
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_u8ReadPin+0xd2>
    1024:	9a 01       	movw	r18, r20
    1026:	28 23       	and	r18, r24
    1028:	39 23       	and	r19, r25
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	87 70       	andi	r24, 0x07	; 7
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_u8ReadPin+0xf2>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_u8ReadPin+0xee>
    1040:	ca 01       	movw	r24, r20
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	26 c0       	rjmp	.+76     	; 0x1092 <DIO_u8ReadPin+0x148>
		}
		else if((DIO_u8LocalPintToRead/8) == 3)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 51       	subi	r24, 0x18	; 24
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	10 f5       	brcc	.+68     	; 0x1092 <DIO_u8ReadPin+0x148>
		{
			DIO_u8DataToBeRead = get_bit(PIND,(DIO_u8LocalPintToRead%8) );
    104e:	e0 e3       	ldi	r30, 0x30	; 48
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9c 01       	movw	r18, r24
    1060:	27 70       	andi	r18, 0x07	; 7
    1062:	30 70       	andi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_u8ReadPin+0x124>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	2a 95       	dec	r18
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_u8ReadPin+0x120>
    1072:	9a 01       	movw	r18, r20
    1074:	28 23       	and	r18, r24
    1076:	39 23       	and	r19, r25
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	87 70       	andi	r24, 0x07	; 7
    1080:	90 70       	andi	r25, 0x00	; 0
    1082:	a9 01       	movw	r20, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_u8ReadPin+0x140>
    1086:	55 95       	asr	r21
    1088:	47 95       	ror	r20
    108a:	8a 95       	dec	r24
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_u8ReadPin+0x13c>
    108e:	ca 01       	movw	r24, r20
    1090:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return DIO_u8DataToBeRead;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
} /*end function */
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <DIO_voidSetPortDirection>:

/*
 *  States the Direction of the Port: INPUT/OUTPUT
 */
extern void DIO_voidSetPortDirection(U8 DIO_u8LocalPortToSet, U8 DIO_u8DIOLocalDirection)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <DIO_voidSetPortDirection+0x6>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	6a 83       	std	Y+2, r22	; 0x02
	/* declare Port A as Output */
	if(DIO_u8LocalPortToSet == 'A')
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	81 34       	cpi	r24, 0x41	; 65
    10b0:	71 f4       	brne	.+28     	; 0x10ce <DIO_voidSetPortDirection+0x30>
	{
		if(DIO_u8DIOLocalDirection == DIO_u8PinOp)
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <DIO_voidSetPortDirection+0x24>
		{
		DDRA = 0xFF;
    10b8:	ea e3       	ldi	r30, 0x3A	; 58
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	80 83       	st	Z, r24
    10c0:	06 c0       	rjmp	.+12     	; 0x10ce <DIO_voidSetPortDirection+0x30>
		}
		else if(DIO_u8DIOLocalDirection == DIO_u8PinIp)
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	88 23       	and	r24, r24
    10c6:	19 f4       	brne	.+6      	; 0x10ce <DIO_voidSetPortDirection+0x30>
		{
		DDRA = 0x00;
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	10 82       	st	Z, r1
		}
	}


	/* declare Port B as Output */
	if(DIO_u8LocalPortToSet == 'B')
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	82 34       	cpi	r24, 0x42	; 66
    10d2:	71 f4       	brne	.+28     	; 0x10f0 <DIO_voidSetPortDirection+0x52>
	{
		if(DIO_u8DIOLocalDirection == DIO_u8PinOp)
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	29 f4       	brne	.+10     	; 0x10e4 <DIO_voidSetPortDirection+0x46>
		{
			DDRB = 0xFF;
    10da:	e7 e3       	ldi	r30, 0x37	; 55
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	80 83       	st	Z, r24
    10e2:	06 c0       	rjmp	.+12     	; 0x10f0 <DIO_voidSetPortDirection+0x52>
		}
		else if(DIO_u8DIOLocalDirection == DIO_u8PinIp)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	88 23       	and	r24, r24
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <DIO_voidSetPortDirection+0x52>
		{
			DDRB = 0x00;
    10ea:	e7 e3       	ldi	r30, 0x37	; 55
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	10 82       	st	Z, r1
		}
	}/* end Port B assigning */

	/* declare Port C as Output */
	if(DIO_u8LocalPortToSet == 'C')
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	83 34       	cpi	r24, 0x43	; 67
    10f4:	71 f4       	brne	.+28     	; 0x1112 <DIO_voidSetPortDirection+0x74>
	{
		if(DIO_u8DIOLocalDirection == DIO_u8PinOp)
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	29 f4       	brne	.+10     	; 0x1106 <DIO_voidSetPortDirection+0x68>
		{
			DDRC = 0xFF;
    10fc:	e4 e3       	ldi	r30, 0x34	; 52
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	80 83       	st	Z, r24
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <DIO_voidSetPortDirection+0x74>
		}
		else if(DIO_u8DIOLocalDirection == DIO_u8PinIp)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	88 23       	and	r24, r24
    110a:	19 f4       	brne	.+6      	; 0x1112 <DIO_voidSetPortDirection+0x74>
		{
			DDRC = 0x00;
    110c:	e4 e3       	ldi	r30, 0x34	; 52
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	10 82       	st	Z, r1
		}
	} /* end Port C assigning */

	/* declare Port D as Output */
	if(DIO_u8LocalPortToSet == 'D')
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	84 34       	cpi	r24, 0x44	; 68
    1116:	71 f4       	brne	.+28     	; 0x1134 <DIO_voidSetPortDirection+0x96>
	{
		if(DIO_u8DIOLocalDirection == DIO_u8PinOp)
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	29 f4       	brne	.+10     	; 0x1128 <DIO_voidSetPortDirection+0x8a>
		{
			DDRD = 0xFF;
    111e:	e1 e3       	ldi	r30, 0x31	; 49
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	80 83       	st	Z, r24
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <DIO_voidSetPortDirection+0x96>
		}
		else if(DIO_u8DIOLocalDirection == DIO_u8PinIp)
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 23       	and	r24, r24
    112c:	19 f4       	brne	.+6      	; 0x1134 <DIO_voidSetPortDirection+0x96>
		{
			DDRD = 0x00;
    112e:	e1 e3       	ldi	r30, 0x31	; 49
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	10 82       	st	Z, r1
		}
	}/* end Port C assigning */
} /* end DIO_voidSetPortDirection Function */
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <DIO_voidWritePort>:

/*
 *  States the Value of the Port: HIGH/LOW
 */
extern void DIO_voidWritePort(U8 DIO_u8LocalPortToSet, U8 DIO_u8ValueToSet)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_voidWritePort+0x6>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	6a 83       	std	Y+2, r22	; 0x02
	/* Assign Port A with value */
	if(DIO_u8LocalPortToSet == 'A')
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	81 34       	cpi	r24, 0x41	; 65
    1150:	21 f4       	brne	.+8      	; 0x115a <DIO_voidWritePort+0x1c>
	{
			PORTA = DIO_u8ValueToSet;
    1152:	eb e3       	ldi	r30, 0x3B	; 59
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	80 83       	st	Z, r24
	}

	/* Assign Port A with value */
	if(DIO_u8LocalPortToSet == 'B')
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	82 34       	cpi	r24, 0x42	; 66
    115e:	21 f4       	brne	.+8      	; 0x1168 <DIO_voidWritePort+0x2a>
	{
		PORTB = DIO_u8ValueToSet;
    1160:	e8 e3       	ldi	r30, 0x38	; 56
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	80 83       	st	Z, r24
	}

	/* Assign Port A with value */
	if(DIO_u8LocalPortToSet == 'C')
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	83 34       	cpi	r24, 0x43	; 67
    116c:	21 f4       	brne	.+8      	; 0x1176 <DIO_voidWritePort+0x38>
	{
		PORTC = DIO_u8ValueToSet;
    116e:	e5 e3       	ldi	r30, 0x35	; 53
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
	}

	/* Assign Port A with value */
	if(DIO_u8LocalPortToSet == 'D')
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	84 34       	cpi	r24, 0x44	; 68
    117a:	21 f4       	brne	.+8      	; 0x1184 <DIO_voidWritePort+0x46>
	{
		PORTD = DIO_u8ValueToSet;
    117c:	e2 e3       	ldi	r30, 0x32	; 50
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
	}
}/* end DIO_voidWritePort Function */
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <DIO_u8ReadPort>:

/*
 *  Reads the Value of the Port: HIGH/LOW
 */
extern U8 DIO_u8ReadPort(U8 DIO_u8LocalPortToRead)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <DIO_u8ReadPort+0x6>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	8a 83       	std	Y+2, r24	; 0x02
	U8 DIO_u8DataToBeRead;

	if( DIO_u8LocalPortToRead == 'A')
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	81 34       	cpi	r24, 0x41	; 65
    119e:	29 f4       	brne	.+10     	; 0x11aa <DIO_u8ReadPort+0x1c>
	{
		DIO_u8DataToBeRead = PINA;
    11a0:	e9 e3       	ldi	r30, 0x39	; 57
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	17 c0       	rjmp	.+46     	; 0x11d8 <DIO_u8ReadPort+0x4a>
	}
	else if(DIO_u8LocalPortToRead == 'B')
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	82 34       	cpi	r24, 0x42	; 66
    11ae:	29 f4       	brne	.+10     	; 0x11ba <DIO_u8ReadPort+0x2c>
	{
		DIO_u8DataToBeRead = PINB;
    11b0:	e6 e3       	ldi	r30, 0x36	; 54
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <DIO_u8ReadPort+0x4a>
	}
	else if(DIO_u8LocalPortToRead == 'C')
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	83 34       	cpi	r24, 0x43	; 67
    11be:	29 f4       	brne	.+10     	; 0x11ca <DIO_u8ReadPort+0x3c>
	{
		DIO_u8DataToBeRead = PINC;
    11c0:	e3 e3       	ldi	r30, 0x33	; 51
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	07 c0       	rjmp	.+14     	; 0x11d8 <DIO_u8ReadPort+0x4a>
	}
	else if(DIO_u8LocalPortToRead == 'D')
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	84 34       	cpi	r24, 0x44	; 68
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <DIO_u8ReadPort+0x4a>
	{
		DIO_u8DataToBeRead = PIND;
    11d0:	e0 e3       	ldi	r30, 0x30	; 48
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return DIO_u8DataToBeRead;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
} /*end DIO_u8ReadPOrt function */
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <DIO_voidSetLowerNibbleDirection>:

/*
 *  States the Direction of the Lower nibbles : OUTPUT or INPUT
 */
extern void DIO_voidSetLowerNibbleDirection(U8 DIO_u8LocalPortToSet, U8 DIO_u8DIOLowerNibbleDirection)
{	/* declare nibbles of Port A */
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <DIO_voidSetLowerNibbleDirection+0x6>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	6a 83       	std	Y+2, r22	; 0x02
	if(DIO_u8LocalPortToSet == 'A')
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	81 34       	cpi	r24, 0x41	; 65
    11f6:	79 f4       	brne	.+30     	; 0x1216 <DIO_voidSetLowerNibbleDirection+0x32>
	{
		assign_nibbleLow(DDRA ,DIO_u8DIOLowerNibbleDirection);
    11f8:	aa e3       	ldi	r26, 0x3A	; 58
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ea e3       	ldi	r30, 0x3A	; 58
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 7f       	andi	r24, 0xF0	; 240
    1204:	8c 93       	st	X, r24
    1206:	aa e3       	ldi	r26, 0x3A	; 58
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ea e3       	ldi	r30, 0x3A	; 58
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	90 81       	ld	r25, Z
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	89 2b       	or	r24, r25
    1214:	8c 93       	st	X, r24
	}/* end Port A assigning */

	/* declare nibbles of Port B */
	if(DIO_u8LocalPortToSet == 'B')
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	82 34       	cpi	r24, 0x42	; 66
    121a:	79 f4       	brne	.+30     	; 0x123a <DIO_voidSetLowerNibbleDirection+0x56>
	{
		assign_nibbleLow(DDRB ,DIO_u8DIOLowerNibbleDirection);
    121c:	a7 e3       	ldi	r26, 0x37	; 55
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e7 e3       	ldi	r30, 0x37	; 55
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 7f       	andi	r24, 0xF0	; 240
    1228:	8c 93       	st	X, r24
    122a:	a7 e3       	ldi	r26, 0x37	; 55
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e7 e3       	ldi	r30, 0x37	; 55
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	90 81       	ld	r25, Z
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	89 2b       	or	r24, r25
    1238:	8c 93       	st	X, r24
	}/* end Port B assigning */

	/* declare nibbles of Port C */
	if(DIO_u8LocalPortToSet == 'C')
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	83 34       	cpi	r24, 0x43	; 67
    123e:	79 f4       	brne	.+30     	; 0x125e <DIO_voidSetLowerNibbleDirection+0x7a>
	{
		assign_nibbleLow(DDRC ,DIO_u8DIOLowerNibbleDirection);
    1240:	a4 e3       	ldi	r26, 0x34	; 52
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e4 e3       	ldi	r30, 0x34	; 52
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 7f       	andi	r24, 0xF0	; 240
    124c:	8c 93       	st	X, r24
    124e:	a4 e3       	ldi	r26, 0x34	; 52
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e4 e3       	ldi	r30, 0x34	; 52
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	90 81       	ld	r25, Z
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	89 2b       	or	r24, r25
    125c:	8c 93       	st	X, r24
	} /* end Port C assigning */

	/* declare nibbles of Port D */
	if(DIO_u8LocalPortToSet == 'D')
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	84 34       	cpi	r24, 0x44	; 68
    1262:	79 f4       	brne	.+30     	; 0x1282 <DIO_voidSetLowerNibbleDirection+0x9e>
	{
		assign_nibbleLow(DDRD,DIO_u8DIOLowerNibbleDirection);
    1264:	a1 e3       	ldi	r26, 0x31	; 49
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e1 e3       	ldi	r30, 0x31	; 49
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 7f       	andi	r24, 0xF0	; 240
    1270:	8c 93       	st	X, r24
    1272:	a1 e3       	ldi	r26, 0x31	; 49
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e1 e3       	ldi	r30, 0x31	; 49
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	90 81       	ld	r25, Z
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	89 2b       	or	r24, r25
    1280:	8c 93       	st	X, r24
	}/* end Port C assigning */
} /* end DIO_voidSetNibblesOfPortDirection Function */
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <DIO_voidSetUpperNibbleDirection>:

/*
 *  States the Direction of the Upper nibbles : OUTPUT or INPUT
 */
extern void DIO_voidSetUpperNibbleDirection(U8 DIO_u8LocalPortToSet, U8 DIO_u8DIOUpperNibbleDirection)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <DIO_voidSetUpperNibbleDirection+0x6>
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	6a 83       	std	Y+2, r22	; 0x02
	/* declare nibbles of Port A */
	if(DIO_u8LocalPortToSet == 'A')
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	81 34       	cpi	r24, 0x41	; 65
    129e:	c1 f4       	brne	.+48     	; 0x12d0 <DIO_voidSetUpperNibbleDirection+0x44>
	{
		assign_nibbleHigh(DDRA ,DIO_u8DIOUpperNibbleDirection);
    12a0:	aa e3       	ldi	r26, 0x3A	; 58
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ea e3       	ldi	r30, 0x3A	; 58
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 70       	andi	r24, 0x0F	; 15
    12ac:	8c 93       	st	X, r24
    12ae:	aa e3       	ldi	r26, 0x3A	; 58
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ea e3       	ldi	r30, 0x3A	; 58
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	28 2f       	mov	r18, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	82 95       	swap	r24
    12c2:	92 95       	swap	r25
    12c4:	90 7f       	andi	r25, 0xF0	; 240
    12c6:	98 27       	eor	r25, r24
    12c8:	80 7f       	andi	r24, 0xF0	; 240
    12ca:	98 27       	eor	r25, r24
    12cc:	82 2b       	or	r24, r18
    12ce:	8c 93       	st	X, r24
	}/* end Port A assigning */

	/* declare nibbles of Port B */
	if(DIO_u8LocalPortToSet == 'B')
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	82 34       	cpi	r24, 0x42	; 66
    12d4:	c1 f4       	brne	.+48     	; 0x1306 <DIO_voidSetUpperNibbleDirection+0x7a>
	{
		assign_nibbleHigh(DDRB ,DIO_u8DIOUpperNibbleDirection);
    12d6:	a7 e3       	ldi	r26, 0x37	; 55
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e7 e3       	ldi	r30, 0x37	; 55
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8f 70       	andi	r24, 0x0F	; 15
    12e2:	8c 93       	st	X, r24
    12e4:	a7 e3       	ldi	r26, 0x37	; 55
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e7 e3       	ldi	r30, 0x37	; 55
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	28 2f       	mov	r18, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	82 95       	swap	r24
    12f8:	92 95       	swap	r25
    12fa:	90 7f       	andi	r25, 0xF0	; 240
    12fc:	98 27       	eor	r25, r24
    12fe:	80 7f       	andi	r24, 0xF0	; 240
    1300:	98 27       	eor	r25, r24
    1302:	82 2b       	or	r24, r18
    1304:	8c 93       	st	X, r24
	}/* end Port B assigning */

	/* declare nibbles of Port C */
	if(DIO_u8LocalPortToSet == 'C')
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	83 34       	cpi	r24, 0x43	; 67
    130a:	c1 f4       	brne	.+48     	; 0x133c <DIO_voidSetUpperNibbleDirection+0xb0>
	{
		assign_nibbleHigh(DDRC ,DIO_u8DIOUpperNibbleDirection);
    130c:	a4 e3       	ldi	r26, 0x34	; 52
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e4 e3       	ldi	r30, 0x34	; 52
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8f 70       	andi	r24, 0x0F	; 15
    1318:	8c 93       	st	X, r24
    131a:	a4 e3       	ldi	r26, 0x34	; 52
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e4 e3       	ldi	r30, 0x34	; 52
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	28 2f       	mov	r18, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	82 95       	swap	r24
    132e:	92 95       	swap	r25
    1330:	90 7f       	andi	r25, 0xF0	; 240
    1332:	98 27       	eor	r25, r24
    1334:	80 7f       	andi	r24, 0xF0	; 240
    1336:	98 27       	eor	r25, r24
    1338:	82 2b       	or	r24, r18
    133a:	8c 93       	st	X, r24
	} /* end Port C assigning */

	/* declare nibbles of Port D */
	if(DIO_u8LocalPortToSet == 'D')
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	84 34       	cpi	r24, 0x44	; 68
    1340:	c1 f4       	brne	.+48     	; 0x1372 <DIO_voidSetUpperNibbleDirection+0xe6>
	{
		assign_nibbleHigh(DDRD,DIO_u8DIOUpperNibbleDirection);
    1342:	a1 e3       	ldi	r26, 0x31	; 49
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e1 e3       	ldi	r30, 0x31	; 49
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 70       	andi	r24, 0x0F	; 15
    134e:	8c 93       	st	X, r24
    1350:	a1 e3       	ldi	r26, 0x31	; 49
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	28 2f       	mov	r18, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	82 95       	swap	r24
    1364:	92 95       	swap	r25
    1366:	90 7f       	andi	r25, 0xF0	; 240
    1368:	98 27       	eor	r25, r24
    136a:	80 7f       	andi	r24, 0xF0	; 240
    136c:	98 27       	eor	r25, r24
    136e:	82 2b       	or	r24, r18
    1370:	8c 93       	st	X, r24
	}/* end Port C assigning */
} /* end DIO_voidSetNibblesOfPortDirection Function */
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <DIO_voidWriteLowerNibble>:

/*
 *  States the Value of the lower nibble of Port: HIGH/LOW
 */
extern void DIO_voidWriteLowerNibble(U8 DIO_u8LocalPortToSet, U8 DIO_u8ValueToSet)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <DIO_voidWriteLowerNibble+0x6>
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	6a 83       	std	Y+2, r22	; 0x02
	/* Assign Port A with value */
	if(DIO_u8LocalPortToSet == 'A')
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	81 34       	cpi	r24, 0x41	; 65
    138e:	79 f4       	brne	.+30     	; 0x13ae <DIO_voidWriteLowerNibble+0x32>
	{
		assign_nibbleLow(PORTA,DIO_u8ValueToSet);
    1390:	ab e3       	ldi	r26, 0x3B	; 59
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 7f       	andi	r24, 0xF0	; 240
    139c:	8c 93       	st	X, r24
    139e:	ab e3       	ldi	r26, 0x3B	; 59
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	90 81       	ld	r25, Z
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	89 2b       	or	r24, r25
    13ac:	8c 93       	st	X, r24
	}

	/* Assign Port B with value */
	if(DIO_u8LocalPortToSet == 'B')
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	82 34       	cpi	r24, 0x42	; 66
    13b2:	79 f4       	brne	.+30     	; 0x13d2 <DIO_voidWriteLowerNibble+0x56>
	{
		assign_nibbleLow(PORTB,DIO_u8ValueToSet);
    13b4:	a8 e3       	ldi	r26, 0x38	; 56
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e8 e3       	ldi	r30, 0x38	; 56
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	80 7f       	andi	r24, 0xF0	; 240
    13c0:	8c 93       	st	X, r24
    13c2:	a8 e3       	ldi	r26, 0x38	; 56
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e8 e3       	ldi	r30, 0x38	; 56
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	90 81       	ld	r25, Z
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	89 2b       	or	r24, r25
    13d0:	8c 93       	st	X, r24
	}

	/* Assign Port C with value */
	if(DIO_u8LocalPortToSet == 'C')
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	83 34       	cpi	r24, 0x43	; 67
    13d6:	79 f4       	brne	.+30     	; 0x13f6 <DIO_voidWriteLowerNibble+0x7a>
	{
		assign_nibbleLow(PORTC,DIO_u8ValueToSet);
    13d8:	a5 e3       	ldi	r26, 0x35	; 53
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e5 e3       	ldi	r30, 0x35	; 53
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	80 7f       	andi	r24, 0xF0	; 240
    13e4:	8c 93       	st	X, r24
    13e6:	a5 e3       	ldi	r26, 0x35	; 53
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e3       	ldi	r30, 0x35	; 53
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	90 81       	ld	r25, Z
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	89 2b       	or	r24, r25
    13f4:	8c 93       	st	X, r24
	}

	/* Assign Port D with value */
	if(DIO_u8LocalPortToSet == 'D')
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	84 34       	cpi	r24, 0x44	; 68
    13fa:	79 f4       	brne	.+30     	; 0x141a <DIO_voidWriteLowerNibble+0x9e>
	{
		assign_nibbleLow(PORTD,DIO_u8ValueToSet);
    13fc:	a2 e3       	ldi	r26, 0x32	; 50
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	80 7f       	andi	r24, 0xF0	; 240
    1408:	8c 93       	st	X, r24
    140a:	a2 e3       	ldi	r26, 0x32	; 50
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e2 e3       	ldi	r30, 0x32	; 50
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	90 81       	ld	r25, Z
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	89 2b       	or	r24, r25
    1418:	8c 93       	st	X, r24
	}
}/* end DIO_voidWriteLowerNibble Function */
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DIO_voidWriteUpperNibble>:

/*
 *  States the Value of the upper nibble of Port: HIGH/LOW
 */
extern void DIO_voidWriteUpperNibble(U8 DIO_u8LocalPortToSet, U8 DIO_u8ValueToSet)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <DIO_voidWriteUpperNibble+0x6>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	6a 83       	std	Y+2, r22	; 0x02
	/* Assign Port A with value */
	if(DIO_u8LocalPortToSet == 'A')
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	81 34       	cpi	r24, 0x41	; 65
    1436:	c1 f4       	brne	.+48     	; 0x1468 <DIO_voidWriteUpperNibble+0x44>
	{
		assign_nibbleHigh(PORTA,DIO_u8ValueToSet);
    1438:	ab e3       	ldi	r26, 0x3B	; 59
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e3       	ldi	r30, 0x3B	; 59
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	8c 93       	st	X, r24
    1446:	ab e3       	ldi	r26, 0x3B	; 59
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	eb e3       	ldi	r30, 0x3B	; 59
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	28 2f       	mov	r18, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	82 95       	swap	r24
    145a:	92 95       	swap	r25
    145c:	90 7f       	andi	r25, 0xF0	; 240
    145e:	98 27       	eor	r25, r24
    1460:	80 7f       	andi	r24, 0xF0	; 240
    1462:	98 27       	eor	r25, r24
    1464:	82 2b       	or	r24, r18
    1466:	8c 93       	st	X, r24
	}

	/* Assign Port B with value */
	if(DIO_u8LocalPortToSet == 'B')
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	82 34       	cpi	r24, 0x42	; 66
    146c:	c1 f4       	brne	.+48     	; 0x149e <DIO_voidWriteUpperNibble+0x7a>
	{
		assign_nibbleHigh(PORTB,DIO_u8ValueToSet);
    146e:	a8 e3       	ldi	r26, 0x38	; 56
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e8 e3       	ldi	r30, 0x38	; 56
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8f 70       	andi	r24, 0x0F	; 15
    147a:	8c 93       	st	X, r24
    147c:	a8 e3       	ldi	r26, 0x38	; 56
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e8 e3       	ldi	r30, 0x38	; 56
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	28 2f       	mov	r18, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	82 95       	swap	r24
    1490:	92 95       	swap	r25
    1492:	90 7f       	andi	r25, 0xF0	; 240
    1494:	98 27       	eor	r25, r24
    1496:	80 7f       	andi	r24, 0xF0	; 240
    1498:	98 27       	eor	r25, r24
    149a:	82 2b       	or	r24, r18
    149c:	8c 93       	st	X, r24
	}

	/* Assign Port C with value */
	if(DIO_u8LocalPortToSet == 'C')
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	83 34       	cpi	r24, 0x43	; 67
    14a2:	c1 f4       	brne	.+48     	; 0x14d4 <DIO_voidWriteUpperNibble+0xb0>
	{
		assign_nibbleHigh(PORTC,DIO_u8ValueToSet);
    14a4:	a5 e3       	ldi	r26, 0x35	; 53
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e5 e3       	ldi	r30, 0x35	; 53
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 70       	andi	r24, 0x0F	; 15
    14b0:	8c 93       	st	X, r24
    14b2:	a5 e3       	ldi	r26, 0x35	; 53
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e5 e3       	ldi	r30, 0x35	; 53
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	28 2f       	mov	r18, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	82 95       	swap	r24
    14c6:	92 95       	swap	r25
    14c8:	90 7f       	andi	r25, 0xF0	; 240
    14ca:	98 27       	eor	r25, r24
    14cc:	80 7f       	andi	r24, 0xF0	; 240
    14ce:	98 27       	eor	r25, r24
    14d0:	82 2b       	or	r24, r18
    14d2:	8c 93       	st	X, r24
	}

	/* Assign Port D with value */
	if(DIO_u8LocalPortToSet == 'D')
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	84 34       	cpi	r24, 0x44	; 68
    14d8:	c1 f4       	brne	.+48     	; 0x150a <DIO_voidWriteUpperNibble+0xe6>
	{
		assign_nibbleHigh(PORTD,DIO_u8ValueToSet);
    14da:	a2 e3       	ldi	r26, 0x32	; 50
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e2 e3       	ldi	r30, 0x32	; 50
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	8f 70       	andi	r24, 0x0F	; 15
    14e6:	8c 93       	st	X, r24
    14e8:	a2 e3       	ldi	r26, 0x32	; 50
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e2 e3       	ldi	r30, 0x32	; 50
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	28 2f       	mov	r18, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	82 95       	swap	r24
    14fc:	92 95       	swap	r25
    14fe:	90 7f       	andi	r25, 0xF0	; 240
    1500:	98 27       	eor	r25, r24
    1502:	80 7f       	andi	r24, 0xF0	; 240
    1504:	98 27       	eor	r25, r24
    1506:	82 2b       	or	r24, r18
    1508:	8c 93       	st	X, r24
	}
}/* end DIO_voidWriteUpperNibble Function */
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <DIO_u8ReadLowerNibble>:

/*
 *  Reads the Value of the lower nibble of the Port: HIGH/LOW
 */
extern U8 DIO_u8ReadLowerNibble(U8 DIO_u8LocalPortToRead)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <DIO_u8ReadLowerNibble+0x6>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8a 83       	std	Y+2, r24	; 0x02
	U8 DIO_u8DataToBeRead;

	if( DIO_u8LocalPortToRead == 'A')
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	81 34       	cpi	r24, 0x41	; 65
    1524:	31 f4       	brne	.+12     	; 0x1532 <DIO_u8ReadLowerNibble+0x1e>
	{
		DIO_u8DataToBeRead = get_nibbleLow(PINA);
    1526:	e9 e3       	ldi	r30, 0x39	; 57
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8f 70       	andi	r24, 0x0F	; 15
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	1a c0       	rjmp	.+52     	; 0x1566 <DIO_u8ReadLowerNibble+0x52>
	}
	else if(DIO_u8LocalPortToRead == 'B')
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	82 34       	cpi	r24, 0x42	; 66
    1536:	31 f4       	brne	.+12     	; 0x1544 <DIO_u8ReadLowerNibble+0x30>
	{
		DIO_u8DataToBeRead = get_nibbleLow(PINB);
    1538:	e6 e3       	ldi	r30, 0x36	; 54
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8f 70       	andi	r24, 0x0F	; 15
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	11 c0       	rjmp	.+34     	; 0x1566 <DIO_u8ReadLowerNibble+0x52>
	}
	else if(DIO_u8LocalPortToRead == 'C')
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	83 34       	cpi	r24, 0x43	; 67
    1548:	31 f4       	brne	.+12     	; 0x1556 <DIO_u8ReadLowerNibble+0x42>
	{
		DIO_u8DataToBeRead = get_nibbleLow(PINC);
    154a:	e3 e3       	ldi	r30, 0x33	; 51
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 70       	andi	r24, 0x0F	; 15
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	08 c0       	rjmp	.+16     	; 0x1566 <DIO_u8ReadLowerNibble+0x52>
	}
	else if(DIO_u8LocalPortToRead == 'D')
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	84 34       	cpi	r24, 0x44	; 68
    155a:	29 f4       	brne	.+10     	; 0x1566 <DIO_u8ReadLowerNibble+0x52>
	{
		DIO_u8DataToBeRead = get_nibbleLow(PIND);
    155c:	e0 e3       	ldi	r30, 0x30	; 48
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8f 70       	andi	r24, 0x0F	; 15
    1564:	89 83       	std	Y+1, r24	; 0x01
	}

	return DIO_u8DataToBeRead;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
} /*end DIO_u8ReadLowerNibble function */
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <DIO_u8ReadUpperNibble>:

/*
 *  Reads the Value of the Upper nibble of the Port: HIGH/LOW
 */
extern U8 DIO_u8ReadUpperNibble(U8 DIO_u8LocalPortToRead)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <DIO_u8ReadUpperNibble+0x6>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	8a 83       	std	Y+2, r24	; 0x02
	U8 DIO_u8DataToBeRead;

	if( DIO_u8LocalPortToRead == 'A')
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	81 34       	cpi	r24, 0x41	; 65
    1582:	39 f4       	brne	.+14     	; 0x1592 <DIO_u8ReadUpperNibble+0x20>
	{
		DIO_u8DataToBeRead = get_nibbleHigh(PINA);
    1584:	e9 e3       	ldi	r30, 0x39	; 57
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	82 95       	swap	r24
    158c:	8f 70       	andi	r24, 0x0F	; 15
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	1d c0       	rjmp	.+58     	; 0x15cc <DIO_u8ReadUpperNibble+0x5a>
	}
	else if(DIO_u8LocalPortToRead == 'B')
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	82 34       	cpi	r24, 0x42	; 66
    1596:	39 f4       	brne	.+14     	; 0x15a6 <DIO_u8ReadUpperNibble+0x34>
	{
		DIO_u8DataToBeRead = get_nibbleHigh(PINB);
    1598:	e6 e3       	ldi	r30, 0x36	; 54
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	82 95       	swap	r24
    15a0:	8f 70       	andi	r24, 0x0F	; 15
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	13 c0       	rjmp	.+38     	; 0x15cc <DIO_u8ReadUpperNibble+0x5a>
	}
	else if(DIO_u8LocalPortToRead == 'C')
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	83 34       	cpi	r24, 0x43	; 67
    15aa:	39 f4       	brne	.+14     	; 0x15ba <DIO_u8ReadUpperNibble+0x48>
	{
		DIO_u8DataToBeRead = get_nibbleHigh(PINC);
    15ac:	e3 e3       	ldi	r30, 0x33	; 51
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	82 95       	swap	r24
    15b4:	8f 70       	andi	r24, 0x0F	; 15
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <DIO_u8ReadUpperNibble+0x5a>
	}
	else if(DIO_u8LocalPortToRead == 'D')
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	84 34       	cpi	r24, 0x44	; 68
    15be:	31 f4       	brne	.+12     	; 0x15cc <DIO_u8ReadUpperNibble+0x5a>
	{
		DIO_u8DataToBeRead = get_nibbleHigh(PIND);
    15c0:	e0 e3       	ldi	r30, 0x30	; 48
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	82 95       	swap	r24
    15c8:	8f 70       	andi	r24, 0x0F	; 15
    15ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return DIO_u8DataToBeRead;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
} /*end DIO_u8ReadUpperNibble function */
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <LCD_voidInit>:
#include "LCD.h"

#include <stdlib.h>

extern void LCD_voidInit(void)
{
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	c4 55       	subi	r28, 0x54	; 84
    15e6:	d0 40       	sbci	r29, 0x00	; 0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
	// Control Pins:
	/* RS: A0, R\W: A1, E: A2 */
	DIO_voidSetPinDirection(LCD_RS, DIO_u8PinOp);
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	61 e0       	ldi	r22, 0x01	; 1
    15f6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW, DIO_u8PinOp);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E, DIO_u8PinOp);
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_voidSetPinDirection>

	// Data Pins:
	/* Connected to Port D */
	DIO_voidSetPortDirection('C', DIO_u8PortOp);
    160a:	83 e4       	ldi	r24, 0x43	; 67
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	0e 94 4f 08 	call	0x109e	; 0x109e <DIO_voidSetPortDirection>
    1612:	fe 01       	movw	r30, r28
    1614:	ef 5a       	subi	r30, 0xAF	; 175
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a8 e4       	ldi	r26, 0x48	; 72
    161e:	b2 e4       	ldi	r27, 0x42	; 66
    1620:	80 83       	st	Z, r24
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	a2 83       	std	Z+2, r26	; 0x02
    1626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1628:	8e 01       	movw	r16, r28
    162a:	03 5b       	subi	r16, 0xB3	; 179
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	fe 01       	movw	r30, r28
    1630:	ef 5a       	subi	r30, 0xAF	; 175
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a ef       	ldi	r20, 0xFA	; 250
    1642:	54 e4       	ldi	r21, 0x44	; 68
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	f8 01       	movw	r30, r16
    164e:	80 83       	st	Z, r24
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	a2 83       	std	Z+2, r26	; 0x02
    1654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1656:	fe 01       	movw	r30, r28
    1658:	e3 5b       	subi	r30, 0xB3	; 179
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	44 f4       	brge	.+16     	; 0x1684 <LCD_voidInit+0xac>
		__ticks = 1;
    1674:	fe 01       	movw	r30, r28
    1676:	e5 5b       	subi	r30, 0xB5	; 181
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	64 c0       	rjmp	.+200    	; 0x174c <LCD_voidInit+0x174>
	else if (__tmp > 65535)
    1684:	fe 01       	movw	r30, r28
    1686:	e3 5b       	subi	r30, 0xB3	; 179
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169e:	18 16       	cp	r1, r24
    16a0:	0c f0       	brlt	.+2      	; 0x16a4 <LCD_voidInit+0xcc>
    16a2:	43 c0       	rjmp	.+134    	; 0x172a <LCD_voidInit+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	fe 01       	movw	r30, r28
    16a6:	ef 5a       	subi	r30, 0xAF	; 175
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	8e 01       	movw	r16, r28
    16c4:	05 5b       	subi	r16, 0xB5	; 181
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	f8 01       	movw	r30, r16
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	1f c0       	rjmp	.+62     	; 0x171a <LCD_voidInit+0x142>
    16dc:	fe 01       	movw	r30, r28
    16de:	e7 5b       	subi	r30, 0xB7	; 183
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	88 ec       	ldi	r24, 0xC8	; 200
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	91 83       	std	Z+1, r25	; 0x01
    16e8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ea:	fe 01       	movw	r30, r28
    16ec:	e7 5b       	subi	r30, 0xB7	; 183
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <LCD_voidInit+0x11c>
    16f8:	fe 01       	movw	r30, r28
    16fa:	e7 5b       	subi	r30, 0xB7	; 183
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	de 01       	movw	r26, r28
    1704:	a5 5b       	subi	r26, 0xB5	; 181
    1706:	bf 4f       	sbci	r27, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	e5 5b       	subi	r30, 0xB5	; 181
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	11 96       	adiw	r26, 0x01	; 1
    1716:	9c 93       	st	X, r25
    1718:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	fe 01       	movw	r30, r28
    171c:	e5 5b       	subi	r30, 0xB5	; 181
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	d1 f6       	brne	.-76     	; 0x16dc <LCD_voidInit+0x104>
    1728:	27 c0       	rjmp	.+78     	; 0x1778 <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	8e 01       	movw	r16, r28
    172c:	05 5b       	subi	r16, 0xB5	; 181
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	fe 01       	movw	r30, r28
    1732:	e3 5b       	subi	r30, 0xB3	; 179
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	f8 01       	movw	r30, r16
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24
    174c:	de 01       	movw	r26, r28
    174e:	a9 5b       	subi	r26, 0xB9	; 185
    1750:	bf 4f       	sbci	r27, 0xFF	; 255
    1752:	fe 01       	movw	r30, r28
    1754:	e5 5b       	subi	r30, 0xB5	; 181
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	8d 93       	st	X+, r24
    175e:	9c 93       	st	X, r25
    1760:	fe 01       	movw	r30, r28
    1762:	e9 5b       	subi	r30, 0xB9	; 185
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_voidInit+0x192>
    176e:	fe 01       	movw	r30, r28
    1770:	e9 5b       	subi	r30, 0xB9	; 185
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24

	_delay_ms(50);
		/* review the datasheet for re-configuration */

	/* Display Clear */
	LCD_voidWriteCommand(0b00000001);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteCommand>
    177e:	fe 01       	movw	r30, r28
    1780:	ed 5b       	subi	r30, 0xBD	; 189
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e2       	ldi	r26, 0x20	; 32
    178a:	b1 e4       	ldi	r27, 0x41	; 65
    178c:	80 83       	st	Z, r24
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	a2 83       	std	Z+2, r26	; 0x02
    1792:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1794:	8e 01       	movw	r16, r28
    1796:	01 5c       	subi	r16, 0xC1	; 193
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	fe 01       	movw	r30, r28
    179c:	ed 5b       	subi	r30, 0xBD	; 189
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4a ef       	ldi	r20, 0xFA	; 250
    17ae:	54 e4       	ldi	r21, 0x44	; 68
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	f8 01       	movw	r30, r16
    17ba:	80 83       	st	Z, r24
    17bc:	91 83       	std	Z+1, r25	; 0x01
    17be:	a2 83       	std	Z+2, r26	; 0x02
    17c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17c2:	fe 01       	movw	r30, r28
    17c4:	ff 96       	adiw	r30, 0x3f	; 63
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e8       	ldi	r20, 0x80	; 128
    17d4:	5f e3       	ldi	r21, 0x3F	; 63
    17d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17da:	88 23       	and	r24, r24
    17dc:	2c f4       	brge	.+10     	; 0x17e8 <LCD_voidInit+0x210>
		__ticks = 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9e af       	std	Y+62, r25	; 0x3e
    17e4:	8d af       	std	Y+61, r24	; 0x3d
    17e6:	46 c0       	rjmp	.+140    	; 0x1874 <LCD_voidInit+0x29c>
	else if (__tmp > 65535)
    17e8:	fe 01       	movw	r30, r28
    17ea:	ff 96       	adiw	r30, 0x3f	; 63
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	64 f5       	brge	.+88     	; 0x185c <LCD_voidInit+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	fe 01       	movw	r30, r28
    1806:	ed 5b       	subi	r30, 0xBD	; 189
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e2       	ldi	r20, 0x20	; 32
    1818:	51 e4       	ldi	r21, 0x41	; 65
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	bc 01       	movw	r22, r24
    1824:	cd 01       	movw	r24, r26
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9e af       	std	Y+62, r25	; 0x3e
    1830:	8d af       	std	Y+61, r24	; 0x3d
    1832:	0f c0       	rjmp	.+30     	; 0x1852 <LCD_voidInit+0x27a>
    1834:	88 ec       	ldi	r24, 0xC8	; 200
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9c af       	std	Y+60, r25	; 0x3c
    183a:	8b af       	std	Y+59, r24	; 0x3b
    183c:	8b ad       	ldd	r24, Y+59	; 0x3b
    183e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <LCD_voidInit+0x268>
    1844:	9c af       	std	Y+60, r25	; 0x3c
    1846:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1848:	8d ad       	ldd	r24, Y+61	; 0x3d
    184a:	9e ad       	ldd	r25, Y+62	; 0x3e
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	9e af       	std	Y+62, r25	; 0x3e
    1850:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1852:	8d ad       	ldd	r24, Y+61	; 0x3d
    1854:	9e ad       	ldd	r25, Y+62	; 0x3e
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	69 f7       	brne	.-38     	; 0x1834 <LCD_voidInit+0x25c>
    185a:	16 c0       	rjmp	.+44     	; 0x1888 <LCD_voidInit+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185c:	fe 01       	movw	r30, r28
    185e:	ff 96       	adiw	r30, 0x3f	; 63
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e af       	std	Y+62, r25	; 0x3e
    1872:	8d af       	std	Y+61, r24	; 0x3d
    1874:	8d ad       	ldd	r24, Y+61	; 0x3d
    1876:	9e ad       	ldd	r25, Y+62	; 0x3e
    1878:	9a af       	std	Y+58, r25	; 0x3a
    187a:	89 af       	std	Y+57, r24	; 0x39
    187c:	89 ad       	ldd	r24, Y+57	; 0x39
    187e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_voidInit+0x2a8>
    1884:	9a af       	std	Y+58, r25	; 0x3a
    1886:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);

	/* Return Home  */
	LCD_voidWriteCommand(0b00000010);
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteCommand>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e2       	ldi	r26, 0x20	; 32
    1894:	b1 e4       	ldi	r27, 0x41	; 65
    1896:	8d ab       	std	Y+53, r24	; 0x35
    1898:	9e ab       	std	Y+54, r25	; 0x36
    189a:	af ab       	std	Y+55, r26	; 0x37
    189c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	6d a9       	ldd	r22, Y+53	; 0x35
    18a0:	7e a9       	ldd	r23, Y+54	; 0x36
    18a2:	8f a9       	ldd	r24, Y+55	; 0x37
    18a4:	98 ad       	ldd	r25, Y+56	; 0x38
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a ef       	ldi	r20, 0xFA	; 250
    18ac:	54 e4       	ldi	r21, 0x44	; 68
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	89 ab       	std	Y+49, r24	; 0x31
    18b8:	9a ab       	std	Y+50, r25	; 0x32
    18ba:	ab ab       	std	Y+51, r26	; 0x33
    18bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18be:	69 a9       	ldd	r22, Y+49	; 0x31
    18c0:	7a a9       	ldd	r23, Y+50	; 0x32
    18c2:	8b a9       	ldd	r24, Y+51	; 0x33
    18c4:	9c a9       	ldd	r25, Y+52	; 0x34
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <LCD_voidInit+0x308>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	3f c0       	rjmp	.+126    	; 0x195e <LCD_voidInit+0x386>
	else if (__tmp > 65535)
    18e0:	69 a9       	ldd	r22, Y+49	; 0x31
    18e2:	7a a9       	ldd	r23, Y+50	; 0x32
    18e4:	8b a9       	ldd	r24, Y+51	; 0x33
    18e6:	9c a9       	ldd	r25, Y+52	; 0x34
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <LCD_voidInit+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	6d a9       	ldd	r22, Y+53	; 0x35
    18fa:	7e a9       	ldd	r23, Y+54	; 0x36
    18fc:	8f a9       	ldd	r24, Y+55	; 0x37
    18fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	98 ab       	std	Y+48, r25	; 0x30
    191e:	8f a7       	std	Y+47, r24	; 0x2f
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_voidInit+0x368>
    1922:	88 ec       	ldi	r24, 0xC8	; 200
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9e a7       	std	Y+46, r25	; 0x2e
    1928:	8d a7       	std	Y+45, r24	; 0x2d
    192a:	8d a5       	ldd	r24, Y+45	; 0x2d
    192c:	9e a5       	ldd	r25, Y+46	; 0x2e
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_voidInit+0x356>
    1932:	9e a7       	std	Y+46, r25	; 0x2e
    1934:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8f a5       	ldd	r24, Y+47	; 0x2f
    1938:	98 a9       	ldd	r25, Y+48	; 0x30
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	98 ab       	std	Y+48, r25	; 0x30
    193e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8f a5       	ldd	r24, Y+47	; 0x2f
    1942:	98 a9       	ldd	r25, Y+48	; 0x30
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <LCD_voidInit+0x34a>
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <LCD_voidInit+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	69 a9       	ldd	r22, Y+49	; 0x31
    194c:	7a a9       	ldd	r23, Y+50	; 0x32
    194e:	8b a9       	ldd	r24, Y+51	; 0x33
    1950:	9c a9       	ldd	r25, Y+52	; 0x34
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	98 ab       	std	Y+48, r25	; 0x30
    195c:	8f a7       	std	Y+47, r24	; 0x2f
    195e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1960:	98 a9       	ldd	r25, Y+48	; 0x30
    1962:	9c a7       	std	Y+44, r25	; 0x2c
    1964:	8b a7       	std	Y+43, r24	; 0x2b
    1966:	8b a5       	ldd	r24, Y+43	; 0x2b
    1968:	9c a5       	ldd	r25, Y+44	; 0x2c
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_voidInit+0x392>
    196e:	9c a7       	std	Y+44, r25	; 0x2c
    1970:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	/*Entry Mode Set */
	LCD_voidWriteCommand(0b00000110);
    1972:	86 e0       	ldi	r24, 0x06	; 6
    1974:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteCommand>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e2       	ldi	r26, 0x20	; 32
    197e:	b1 e4       	ldi	r27, 0x41	; 65
    1980:	8f a3       	std	Y+39, r24	; 0x27
    1982:	98 a7       	std	Y+40, r25	; 0x28
    1984:	a9 a7       	std	Y+41, r26	; 0x29
    1986:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	6f a1       	ldd	r22, Y+39	; 0x27
    198a:	78 a5       	ldd	r23, Y+40	; 0x28
    198c:	89 a5       	ldd	r24, Y+41	; 0x29
    198e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a ef       	ldi	r20, 0xFA	; 250
    1996:	54 e4       	ldi	r21, 0x44	; 68
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8b a3       	std	Y+35, r24	; 0x23
    19a2:	9c a3       	std	Y+36, r25	; 0x24
    19a4:	ad a3       	std	Y+37, r26	; 0x25
    19a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19a8:	6b a1       	ldd	r22, Y+35	; 0x23
    19aa:	7c a1       	ldd	r23, Y+36	; 0x24
    19ac:	8d a1       	ldd	r24, Y+37	; 0x25
    19ae:	9e a1       	ldd	r25, Y+38	; 0x26
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <LCD_voidInit+0x3f2>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9a a3       	std	Y+34, r25	; 0x22
    19c6:	89 a3       	std	Y+33, r24	; 0x21
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    19ca:	6b a1       	ldd	r22, Y+35	; 0x23
    19cc:	7c a1       	ldd	r23, Y+36	; 0x24
    19ce:	8d a1       	ldd	r24, Y+37	; 0x25
    19d0:	9e a1       	ldd	r25, Y+38	; 0x26
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	6f a1       	ldd	r22, Y+39	; 0x27
    19e4:	78 a5       	ldd	r23, Y+40	; 0x28
    19e6:	89 a5       	ldd	r24, Y+41	; 0x29
    19e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9a a3       	std	Y+34, r25	; 0x22
    1a08:	89 a3       	std	Y+33, r24	; 0x21
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <LCD_voidInit+0x452>
    1a0c:	88 ec       	ldi	r24, 0xC8	; 200
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	98 a3       	std	Y+32, r25	; 0x20
    1a12:	8f 8f       	std	Y+31, r24	; 0x1f
    1a14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a16:	98 a1       	ldd	r25, Y+32	; 0x20
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_voidInit+0x440>
    1a1c:	98 a3       	std	Y+32, r25	; 0x20
    1a1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	89 a1       	ldd	r24, Y+33	; 0x21
    1a22:	9a a1       	ldd	r25, Y+34	; 0x22
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9a a3       	std	Y+34, r25	; 0x22
    1a28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <LCD_voidInit+0x434>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <LCD_voidInit+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6b a1       	ldd	r22, Y+35	; 0x23
    1a36:	7c a1       	ldd	r23, Y+36	; 0x24
    1a38:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9a a3       	std	Y+34, r25	; 0x22
    1a46:	89 a3       	std	Y+33, r24	; 0x21
    1a48:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_voidInit+0x47c>
    1a58:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	/* Display ON OFF Control, crusor 0n */
	LCD_voidWriteCommand(0b00001110);
    1a5c:	8e e0       	ldi	r24, 0x0E	; 14
    1a5e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteCommand>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e2       	ldi	r26, 0x20	; 32
    1a68:	b1 e4       	ldi	r27, 0x41	; 65
    1a6a:	89 8f       	std	Y+25, r24	; 0x19
    1a6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	69 8d       	ldd	r22, Y+25	; 0x19
    1a74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8d 8b       	std	Y+21, r24	; 0x15
    1a8c:	9e 8b       	std	Y+22, r25	; 0x16
    1a8e:	af 8b       	std	Y+23, r26	; 0x17
    1a90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a92:	6d 89       	ldd	r22, Y+21	; 0x15
    1a94:	7e 89       	ldd	r23, Y+22	; 0x16
    1a96:	8f 89       	ldd	r24, Y+23	; 0x17
    1a98:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <LCD_voidInit+0x4dc>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <LCD_voidInit+0x55a>
	else if (__tmp > 65535)
    1ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aba:	98 8d       	ldd	r25, Y+24	; 0x18
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <LCD_voidInit+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9c 8b       	std	Y+20, r25	; 0x14
    1af2:	8b 8b       	std	Y+19, r24	; 0x13
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <LCD_voidInit+0x53c>
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
    1afe:	89 89       	ldd	r24, Y+17	; 0x11
    1b00:	9a 89       	ldd	r25, Y+18	; 0x12
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_voidInit+0x52a>
    1b06:	9a 8b       	std	Y+18, r25	; 0x12
    1b08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9c 8b       	std	Y+20, r25	; 0x14
    1b12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8b 89       	ldd	r24, Y+19	; 0x13
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <LCD_voidInit+0x51e>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <LCD_voidInit+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b20:	7e 89       	ldd	r23, Y+22	; 0x16
    1b22:	8f 89       	ldd	r24, Y+23	; 0x17
    1b24:	98 8d       	ldd	r25, Y+24	; 0x18
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
    1b32:	8b 89       	ldd	r24, Y+19	; 0x13
    1b34:	9c 89       	ldd	r25, Y+20	; 0x14
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f
    1b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3c:	98 89       	ldd	r25, Y+16	; 0x10
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_voidInit+0x566>
    1b42:	98 8b       	std	Y+16, r25	; 0x10
    1b44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	/* Function Set  */
	LCD_voidWriteCommand(0b00111000);
    1b46:	88 e3       	ldi	r24, 0x38	; 56
    1b48:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteCommand>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e2       	ldi	r26, 0x20	; 32
    1b52:	b1 e4       	ldi	r27, 0x41	; 65
    1b54:	8b 87       	std	Y+11, r24	; 0x0b
    1b56:	9c 87       	std	Y+12, r25	; 0x0c
    1b58:	ad 87       	std	Y+13, r26	; 0x0d
    1b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a ef       	ldi	r20, 0xFA	; 250
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8f 83       	std	Y+7, r24	; 0x07
    1b76:	98 87       	std	Y+8, r25	; 0x08
    1b78:	a9 87       	std	Y+9, r26	; 0x09
    1b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <LCD_voidInit+0x5c6>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <LCD_voidInit+0x644>
	else if (__tmp > 65535)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <LCD_voidInit+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <LCD_voidInit+0x626>
    1be0:	88 ec       	ldi	r24, 0xC8	; 200
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_voidInit+0x614>
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <LCD_voidInit+0x608>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <LCD_voidInit+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_voidInit+0x650>
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);


} /* end of function LCD_voidInit */
    1c30:	cc 5a       	subi	r28, 0xAC	; 172
    1c32:	df 4f       	sbci	r29, 0xFF	; 255
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <LCD_voidWriteCommand>:


extern void LCD_voidWriteCommand(U8 command)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	2f 97       	sbiw	r28, 0x0f	; 15
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	8f 87       	std	Y+15, r24	; 0x0f
		/*  RS -> 0, to command */
	DIO_voidWritePin(LCD_RS,DIO_u8Low);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidWritePin>

		/* RW -> 0, to write */
	DIO_voidWritePin(LCD_RW,DIO_u8Low);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidWritePin>

		/* Read the command */
	DIO_voidWritePort('C', command);
    1c6e:	83 e4       	ldi	r24, 0x43	; 67
    1c70:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c72:	0e 94 9f 08 	call	0x113e	; 0x113e <DIO_voidWritePort>
	//	PORTD = command;

		/* Enable */
	DIO_voidWritePin(LCD_E,DIO_u8High);
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidWritePin>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e4       	ldi	r27, 0x40	; 64
    1c86:	8b 87       	std	Y+11, r24	; 0x0b
    1c88:	9c 87       	std	Y+12, r25	; 0x0c
    1c8a:	ad 87       	std	Y+13, r26	; 0x0d
    1c8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8f 83       	std	Y+7, r24	; 0x07
    1ca8:	98 87       	std	Y+8, r25	; 0x08
    1caa:	a9 87       	std	Y+9, r26	; 0x09
    1cac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <LCD_voidWriteCommand+0x88>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <LCD_voidWriteCommand+0x106>
	else if (__tmp > 65535)
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <LCD_voidWriteCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <LCD_voidWriteCommand+0xe8>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	8b 83       	std	Y+3, r24	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_voidWriteCommand+0xd6>
    1d22:	9c 83       	std	Y+4, r25	; 0x04
    1d24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <LCD_voidWriteCommand+0xca>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <LCD_voidWriteCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_voidWriteCommand+0x112>
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // 2 ms to excute.
	DIO_voidWritePin(LCD_E,DIO_u8Low);
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidWritePin>


}/* end of function LCD_voidWriteCommand */
    1d6a:	2f 96       	adiw	r28, 0x0f	; 15
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <LCD_voidDisplay>:


extern void LCD_voidDisplay(U8 data)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	6d 97       	sbiw	r28, 0x1d	; 29
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	8d 8f       	std	Y+29, r24	; 0x1d
		/*  RS -> 1, to Display Data */
	DIO_voidWritePin(LCD_RS,DIO_u8High);
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	61 e0       	ldi	r22, 0x01	; 1
    1d96:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidWritePin>

		/* RW -> 0, to write */
	DIO_voidWritePin(LCD_RW,DIO_u8Low);
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidWritePin>

		/* Enable */
	DIO_voidWritePin(LCD_E,DIO_u8High);
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	61 e0       	ldi	r22, 0x01	; 1
    1da6:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidWritePin>

		/* Read the command */
	DIO_voidWritePort('C', data);
    1daa:	83 e4       	ldi	r24, 0x43	; 67
    1dac:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1dae:	0e 94 9f 08 	call	0x113e	; 0x113e <DIO_voidWritePort>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e0       	ldi	r26, 0x00	; 0
    1db8:	b0 e4       	ldi	r27, 0x40	; 64
    1dba:	89 8f       	std	Y+25, r24	; 0x19
    1dbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1dbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1dc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a ef       	ldi	r20, 0xFA	; 250
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8d 8b       	std	Y+21, r24	; 0x15
    1ddc:	9e 8b       	std	Y+22, r25	; 0x16
    1dde:	af 8b       	std	Y+23, r26	; 0x17
    1de0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1de2:	6d 89       	ldd	r22, Y+21	; 0x15
    1de4:	7e 89       	ldd	r23, Y+22	; 0x16
    1de6:	8f 89       	ldd	r24, Y+23	; 0x17
    1de8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <LCD_voidDisplay+0x88>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9c 8b       	std	Y+20, r25	; 0x14
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <LCD_voidDisplay+0x106>
	else if (__tmp > 65535)
    1e04:	6d 89       	ldd	r22, Y+21	; 0x15
    1e06:	7e 89       	ldd	r23, Y+22	; 0x16
    1e08:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <LCD_voidDisplay+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <LCD_voidDisplay+0xe8>
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9a 8b       	std	Y+18, r25	; 0x12
    1e4c:	89 8b       	std	Y+17, r24	; 0x11
    1e4e:	89 89       	ldd	r24, Y+17	; 0x11
    1e50:	9a 89       	ldd	r25, Y+18	; 0x12
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_voidDisplay+0xd6>
    1e56:	9a 8b       	std	Y+18, r25	; 0x12
    1e58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	9c 8b       	std	Y+20, r25	; 0x14
    1e62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	8b 89       	ldd	r24, Y+19	; 0x13
    1e66:	9c 89       	ldd	r25, Y+20	; 0x14
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <LCD_voidDisplay+0xca>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <LCD_voidDisplay+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e70:	7e 89       	ldd	r23, Y+22	; 0x16
    1e72:	8f 89       	ldd	r24, Y+23	; 0x17
    1e74:	98 8d       	ldd	r25, Y+24	; 0x18
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9c 8b       	std	Y+20, r25	; 0x14
    1e80:	8b 8b       	std	Y+19, r24	; 0x13
    1e82:	8b 89       	ldd	r24, Y+19	; 0x13
    1e84:	9c 89       	ldd	r25, Y+20	; 0x14
    1e86:	98 8b       	std	Y+16, r25	; 0x10
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
    1e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8c:	98 89       	ldd	r25, Y+16	; 0x10
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <LCD_voidDisplay+0x112>
    1e92:	98 8b       	std	Y+16, r25	; 0x10
    1e94:	8f 87       	std	Y+15, r24	; 0x0f


	_delay_ms(2); // 2 ms to excute.
	DIO_voidWritePin(LCD_E,DIO_u8Low);
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidWritePin>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ea4:	b0 e4       	ldi	r27, 0x40	; 64
    1ea6:	8b 87       	std	Y+11, r24	; 0x0b
    1ea8:	9c 87       	std	Y+12, r25	; 0x0c
    1eaa:	ad 87       	std	Y+13, r26	; 0x0d
    1eac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a ef       	ldi	r20, 0xFA	; 250
    1ebc:	54 e4       	ldi	r21, 0x44	; 68
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8f 83       	std	Y+7, r24	; 0x07
    1ec8:	98 87       	std	Y+8, r25	; 0x08
    1eca:	a9 87       	std	Y+9, r26	; 0x09
    1ecc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <LCD_voidDisplay+0x174>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	3f c0       	rjmp	.+126    	; 0x1f6e <LCD_voidDisplay+0x1f2>
	else if (__tmp > 65535)
    1ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef2:	78 85       	ldd	r23, Y+8	; 0x08
    1ef4:	89 85       	ldd	r24, Y+9	; 0x09
    1ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	4c f5       	brge	.+82     	; 0x1f5a <LCD_voidDisplay+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <LCD_voidDisplay+0x1d4>
    1f32:	88 ec       	ldi	r24, 0xC8	; 200
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_voidDisplay+0x1c2>
    1f42:	9c 83       	std	Y+4, r25	; 0x04
    1f44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <LCD_voidDisplay+0x1b6>
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <LCD_voidDisplay+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_voidDisplay+0x1fe>
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}/* end of function LCD_voidDisplay */
    1f82:	6d 96       	adiw	r28, 0x1d	; 29
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <LCD_voidString>:

extern void LCD_voidString(U8* const stringToPrint)
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	61 97       	sbiw	r28, 0x11	; 17
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	99 8b       	std	Y+17, r25	; 0x11
    1faa:	88 8b       	std	Y+16, r24	; 0x10
	U8 index =0;
    1fac:	1f 86       	std	Y+15, r1	; 0x0f
    1fae:	80 c0       	rjmp	.+256    	; 0x20b0 <LCD_voidString+0x11c>

	while(stringToPrint[index] != '\0')
	{
		/* write char on LCD */
		LCD_voidDisplay(stringToPrint[index]);
    1fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	88 89       	ldd	r24, Y+16	; 0x10
    1fb8:	99 89       	ldd	r25, Y+17	; 0x11
    1fba:	fc 01       	movw	r30, r24
    1fbc:	e2 0f       	add	r30, r18
    1fbe:	f3 1f       	adc	r31, r19
    1fc0:	80 81       	ld	r24, Z
    1fc2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_voidDisplay>

		/* next char */
		index++;
    1fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
    1fca:	8f 87       	std	Y+15, r24	; 0x0f
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e4       	ldi	r27, 0x40	; 64
    1fd4:	8b 87       	std	Y+11, r24	; 0x0b
    1fd6:	9c 87       	std	Y+12, r25	; 0x0c
    1fd8:	ad 87       	std	Y+13, r26	; 0x0d
    1fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8f 83       	std	Y+7, r24	; 0x07
    1ff6:	98 87       	std	Y+8, r25	; 0x08
    1ff8:	a9 87       	std	Y+9, r26	; 0x09
    1ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <LCD_voidString+0x8a>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	3f c0       	rjmp	.+126    	; 0x209c <LCD_voidString+0x108>
	else if (__tmp > 65535)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <LCD_voidString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	0f c0       	rjmp	.+30     	; 0x207e <LCD_voidString+0xea>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_voidString+0xd8>
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <LCD_voidString+0xcc>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <LCD_voidString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_voidString+0x114>
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01

extern void LCD_voidString(U8* const stringToPrint)
{
	U8 index =0;

	while(stringToPrint[index] != '\0')
    20b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	88 89       	ldd	r24, Y+16	; 0x10
    20b8:	99 89       	ldd	r25, Y+17	; 0x11
    20ba:	fc 01       	movw	r30, r24
    20bc:	e2 0f       	add	r30, r18
    20be:	f3 1f       	adc	r31, r19
    20c0:	80 81       	ld	r24, Z
    20c2:	88 23       	and	r24, r24
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <LCD_voidString+0x134>
    20c6:	74 cf       	rjmp	.-280    	; 0x1fb0 <LCD_voidString+0x1c>
		/* next char */
		index++;

		_delay_ms(2);
	}	/* end While */
}/* end of function LCD_voidDisplay */
    20c8:	61 96       	adiw	r28, 0x11	; 17
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <LCD_voidInteger>:

extern void LCD_voidInteger(S32 const IntegerToPrint)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	65 97       	sbiw	r28, 0x15	; 21
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	6a 8b       	std	Y+18, r22	; 0x12
    20f0:	7b 8b       	std	Y+19, r23	; 0x13
    20f2:	8c 8b       	std	Y+20, r24	; 0x14
    20f4:	9d 8b       	std	Y+21, r25	; 0x15
	U8 intToStr[3];
	itoa(IntegerToPrint, intToStr, 10); //convert decimal integer to string
    20f6:	8a 89       	ldd	r24, Y+18	; 0x12
    20f8:	9b 89       	ldd	r25, Y+19	; 0x13
    20fa:	9e 01       	movw	r18, r28
    20fc:	21 5f       	subi	r18, 0xF1	; 241
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	b9 01       	movw	r22, r18
    2102:	4a e0       	ldi	r20, 0x0A	; 10
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	0e 94 b8 14 	call	0x2970	; 0x2970 <itoa>
	LCD_voidString(intToStr);
    210a:	ce 01       	movw	r24, r28
    210c:	0f 96       	adiw	r24, 0x0f	; 15
    210e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <LCD_voidString>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e0       	ldi	r26, 0x00	; 0
    2118:	b0 e4       	ldi	r27, 0x40	; 64
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	a9 87       	std	Y+9, r26	; 0x09
    2140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <LCD_voidInteger+0x8a>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <LCD_voidInteger+0x108>
	else if (__tmp > 65535)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <LCD_voidInteger+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <LCD_voidInteger+0xea>
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_voidInteger+0xd8>
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <LCD_voidInteger+0xcc>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <LCD_voidInteger+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_voidInteger+0x114>
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}/* end of function LCD_voidDisplay */
    21f6:	65 96       	adiw	r28, 0x15	; 21
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <LCD_voidClear>:

extern void LCD_voidClear()
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	2e 97       	sbiw	r28, 0x0e	; 14
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
	/* Display Clear */
	LCD_voidWriteCommand(0b00000001);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_voidWriteCommand>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 e2       	ldi	r26, 0x20	; 32
    2228:	b1 e4       	ldi	r27, 0x41	; 65
    222a:	8b 87       	std	Y+11, r24	; 0x0b
    222c:	9c 87       	std	Y+12, r25	; 0x0c
    222e:	ad 87       	std	Y+13, r26	; 0x0d
    2230:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2232:	6b 85       	ldd	r22, Y+11	; 0x0b
    2234:	7c 85       	ldd	r23, Y+12	; 0x0c
    2236:	8d 85       	ldd	r24, Y+13	; 0x0d
    2238:	9e 85       	ldd	r25, Y+14	; 0x0e
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a ef       	ldi	r20, 0xFA	; 250
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8f 83       	std	Y+7, r24	; 0x07
    224c:	98 87       	std	Y+8, r25	; 0x08
    224e:	a9 87       	std	Y+9, r26	; 0x09
    2250:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	5f e3       	ldi	r21, 0x3F	; 63
    2262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <LCD_voidClear+0x6c>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    2274:	6f 81       	ldd	r22, Y+7	; 0x07
    2276:	78 85       	ldd	r23, Y+8	; 0x08
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	6b 85       	ldd	r22, Y+11	; 0x0b
    228e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2290:	8d 85       	ldd	r24, Y+13	; 0x0d
    2292:	9e 85       	ldd	r25, Y+14	; 0x0e
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <LCD_voidClear+0xcc>
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_voidClear+0xba>
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <LCD_voidClear+0xae>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_voidClear+0xf6>
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}/* end of function LCD_voidClear */
    2306:	2e 96       	adiw	r28, 0x0e	; 14
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <UART_voidInit>:
#include "utilss.h"
#include "Types.h"
#include "DIO.h"

void UART_voidInit()
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(DIO_u8PinD0, DIO_u8PinIp);	//	Rx
    2320:	88 e1       	ldi	r24, 0x18	; 24
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PinD1, DIO_u8PinOp);	//	Tx
    2328:	89 e1       	ldi	r24, 0x19	; 25
    232a:	61 e0       	ldi	r22, 0x01	; 1
    232c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <DIO_voidSetPinDirection>
    UBRRL = 103;
    UBRRH&=0b01110000;
*/


	UCSRA |= (RXC<<7) | (TXC<<6) | (UDRE<<5) |  (FE<<4) | (DOR<<3) | (PE<<2) | (U2X<<1) | (MPCM<<0);
    2330:	ab e2       	ldi	r26, 0x2B	; 43
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	eb e2       	ldi	r30, 0x2B	; 43
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	82 60       	ori	r24, 0x02	; 2
    233c:	8c 93       	st	X, r24
//	UCSRA |= (PE<<2) | (U2X<<1) | (MPCM<<0);
	UCSRB |= (RXCIE<<7) | (TXCIE<<6) | (UDRIE<<5) |  (RXEN<<4) | (TXEN<<3) | (UCSZ2<<2) | (RXB8<<1) | (TXB8<<0);
    233e:	aa e2       	ldi	r26, 0x2A	; 42
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	ea e2       	ldi	r30, 0x2A	; 42
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	88 6d       	ori	r24, 0xD8	; 216
    234a:	8c 93       	st	X, r24
	//	UCSRC
	UCSRC_UBRRH |= (URSEL_C<<7) | (UMSEL<<6) | (UPM1<<5) |  (UPM0<<4) | (USBS<<3) | (UCSZ1<<2) | (UCSZ0<<1) | (UCPOL<<0);
    234c:	a0 e4       	ldi	r26, 0x40	; 64
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e0 e4       	ldi	r30, 0x40	; 64
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	86 68       	ori	r24, 0x86	; 134
    2358:	8c 93       	st	X, r24
	//	UBRR
	UCSRC_UBRRH |= (URSEL_BR<<7)| (UBRR11<<3) | (UBRR10<<2) | (UBRR9<<1) | (UBRR8<<0);
    235a:	a0 e4       	ldi	r26, 0x40	; 64
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e0 e4       	ldi	r30, 0x40	; 64
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	8c 93       	st	X, r24
	UBRRL = 103;
    2366:	e9 e2       	ldi	r30, 0x29	; 41
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	87 e6       	ldi	r24, 0x67	; 103
    236c:	80 83       	st	Z, r24

	#ifdef INTERRUPT
		set_bit(SREG, 7);
    236e:	af e5       	ldi	r26, 0x5F	; 95
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ef e5       	ldi	r30, 0x5F	; 95
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	80 68       	ori	r24, 0x80	; 128
    237a:	8c 93       	st	X, r24
	#endif

}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <UART_u8Recive>:


U8 UART_u8Recive(void)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
//	while(get_bit(UCSRA, 7) ==0);
	while((UCSRA&0b10000000)==0);
    238a:	eb e2       	ldi	r30, 0x2B	; 43
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	88 23       	and	r24, r24
    2392:	dc f7       	brge	.-10     	; 0x238a <UART_u8Recive+0x8>
	return UDR;
    2394:	ec e2       	ldi	r30, 0x2C	; 44
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
}
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <UART_voidTransmit>:

void UART_voidTransmit(U8 const data)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	0f 92       	push	r0
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    23ac:	ec e2       	ldi	r30, 0x2C	; 44
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	80 83       	st	Z, r24
	while(get_bit(UCSRA, 5)==0);
    23b4:	eb e2       	ldi	r30, 0x2B	; 43
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	80 72       	andi	r24, 0x20	; 32
    23c0:	90 70       	andi	r25, 0x00	; 0
    23c2:	95 95       	asr	r25
    23c4:	87 95       	ror	r24
    23c6:	95 95       	asr	r25
    23c8:	87 95       	ror	r24
    23ca:	95 95       	asr	r25
    23cc:	87 95       	ror	r24
    23ce:	95 95       	asr	r25
    23d0:	87 95       	ror	r24
    23d2:	95 95       	asr	r25
    23d4:	87 95       	ror	r24
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	69 f3       	breq	.-38     	; 0x23b4 <UART_voidTransmit+0x14>
}
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <__vector_13>:

volatile U8 Rvalue;
U8 (*recieve)() = BT_u8ReciveChar;
/* RXC ISR	*/
ISR(USART_RXC_vect)
{
    23e2:	1f 92       	push	r1
    23e4:	0f 92       	push	r0
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	0f 92       	push	r0
    23ea:	11 24       	eor	r1, r1
    23ec:	2f 93       	push	r18
    23ee:	3f 93       	push	r19
    23f0:	4f 93       	push	r20
    23f2:	5f 93       	push	r21
    23f4:	6f 93       	push	r22
    23f6:	7f 93       	push	r23
    23f8:	8f 93       	push	r24
    23fa:	9f 93       	push	r25
    23fc:	af 93       	push	r26
    23fe:	bf 93       	push	r27
    2400:	ef 93       	push	r30
    2402:	ff 93       	push	r31
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	2e 97       	sbiw	r28, 0x0e	; 14
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	cd bf       	out	0x3d, r28	; 61

	Rvalue = (*recieve)();
    2412:	e0 91 6f 00 	lds	r30, 0x006F
    2416:	f0 91 70 00 	lds	r31, 0x0070
    241a:	09 95       	icall
    241c:	80 93 73 00 	sts	0x0073, r24
	LCD_voidClear();
    2420:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_voidClear>
	LCD_voidDisplay(Rvalue);
    2424:	80 91 73 00 	lds	r24, 0x0073
    2428:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_voidDisplay>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	aa e7       	ldi	r26, 0x7A	; 122
    2432:	b4 e4       	ldi	r27, 0x44	; 68
    2434:	8b 87       	std	Y+11, r24	; 0x0b
    2436:	9c 87       	std	Y+12, r25	; 0x0c
    2438:	ad 87       	std	Y+13, r26	; 0x0d
    243a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243c:	6b 85       	ldd	r22, Y+11	; 0x0b
    243e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2440:	8d 85       	ldd	r24, Y+13	; 0x0d
    2442:	9e 85       	ldd	r25, Y+14	; 0x0e
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	4a ef       	ldi	r20, 0xFA	; 250
    244a:	54 e4       	ldi	r21, 0x44	; 68
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	8f 83       	std	Y+7, r24	; 0x07
    2456:	98 87       	std	Y+8, r25	; 0x08
    2458:	a9 87       	std	Y+9, r26	; 0x09
    245a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    245c:	6f 81       	ldd	r22, Y+7	; 0x07
    245e:	78 85       	ldd	r23, Y+8	; 0x08
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e8       	ldi	r20, 0x80	; 128
    246a:	5f e3       	ldi	r21, 0x3F	; 63
    246c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2470:	88 23       	and	r24, r24
    2472:	2c f4       	brge	.+10     	; 0x247e <__vector_13+0x9c>
		__ticks = 1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
    247c:	3f c0       	rjmp	.+126    	; 0x24fc <__vector_13+0x11a>
	else if (__tmp > 65535)
    247e:	6f 81       	ldd	r22, Y+7	; 0x07
    2480:	78 85       	ldd	r23, Y+8	; 0x08
    2482:	89 85       	ldd	r24, Y+9	; 0x09
    2484:	9a 85       	ldd	r25, Y+10	; 0x0a
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	3f ef       	ldi	r19, 0xFF	; 255
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	57 e4       	ldi	r21, 0x47	; 71
    248e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	4c f5       	brge	.+82     	; 0x24e8 <__vector_13+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2496:	6b 85       	ldd	r22, Y+11	; 0x0b
    2498:	7c 85       	ldd	r23, Y+12	; 0x0c
    249a:	8d 85       	ldd	r24, Y+13	; 0x0d
    249c:	9e 85       	ldd	r25, Y+14	; 0x0e
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9e 83       	std	Y+6, r25	; 0x06
    24bc:	8d 83       	std	Y+5, r24	; 0x05
    24be:	0f c0       	rjmp	.+30     	; 0x24de <__vector_13+0xfc>
    24c0:	88 ec       	ldi	r24, 0xC8	; 200
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9c 83       	std	Y+4, r25	; 0x04
    24c6:	8b 83       	std	Y+3, r24	; 0x03
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <__vector_13+0xea>
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	8d 81       	ldd	r24, Y+5	; 0x05
    24d6:	9e 81       	ldd	r25, Y+6	; 0x06
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	69 f7       	brne	.-38     	; 0x24c0 <__vector_13+0xde>
    24e6:	14 c0       	rjmp	.+40     	; 0x2510 <__vector_13+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ea:	78 85       	ldd	r23, Y+8	; 0x08
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	9a 81       	ldd	r25, Y+2	; 0x02
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <__vector_13+0x126>
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2510:	2e 96       	adiw	r28, 0x0e	; 14
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	ff 91       	pop	r31
    251c:	ef 91       	pop	r30
    251e:	bf 91       	pop	r27
    2520:	af 91       	pop	r26
    2522:	9f 91       	pop	r25
    2524:	8f 91       	pop	r24
    2526:	7f 91       	pop	r23
    2528:	6f 91       	pop	r22
    252a:	5f 91       	pop	r21
    252c:	4f 91       	pop	r20
    252e:	3f 91       	pop	r19
    2530:	2f 91       	pop	r18
    2532:	0f 90       	pop	r0
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	0f 90       	pop	r0
    2538:	1f 90       	pop	r1
    253a:	18 95       	reti

0000253c <__vector_14>:

ISR(_VECTOR(14))
{
    253c:	1f 92       	push	r1
    253e:	0f 92       	push	r0
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	0f 92       	push	r0
    2544:	11 24       	eor	r1, r1
    2546:	2f 93       	push	r18
    2548:	3f 93       	push	r19
    254a:	4f 93       	push	r20
    254c:	5f 93       	push	r21
    254e:	6f 93       	push	r22
    2550:	7f 93       	push	r23
    2552:	8f 93       	push	r24
    2554:	9f 93       	push	r25
    2556:	af 93       	push	r26
    2558:	bf 93       	push	r27
    255a:	ef 93       	push	r30
    255c:	ff 93       	push	r31
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	2e 97       	sbiw	r28, 0x0e	; 14
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInteger(9);
    256c:	69 e0       	ldi	r22, 0x09	; 9
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidInteger>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	aa e7       	ldi	r26, 0x7A	; 122
    257e:	b4 e4       	ldi	r27, 0x44	; 68
    2580:	8b 87       	std	Y+11, r24	; 0x0b
    2582:	9c 87       	std	Y+12, r25	; 0x0c
    2584:	ad 87       	std	Y+13, r26	; 0x0d
    2586:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4a ef       	ldi	r20, 0xFA	; 250
    2596:	54 e4       	ldi	r21, 0x44	; 68
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8f 83       	std	Y+7, r24	; 0x07
    25a2:	98 87       	std	Y+8, r25	; 0x08
    25a4:	a9 87       	std	Y+9, r26	; 0x09
    25a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a8:	6f 81       	ldd	r22, Y+7	; 0x07
    25aa:	78 85       	ldd	r23, Y+8	; 0x08
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	2c f4       	brge	.+10     	; 0x25ca <__vector_14+0x8e>
		__ticks = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	3f c0       	rjmp	.+126    	; 0x2648 <__vector_14+0x10c>
	else if (__tmp > 65535)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	3f ef       	ldi	r19, 0xFF	; 255
    25d6:	4f e7       	ldi	r20, 0x7F	; 127
    25d8:	57 e4       	ldi	r21, 0x47	; 71
    25da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25de:	18 16       	cp	r1, r24
    25e0:	4c f5       	brge	.+82     	; 0x2634 <__vector_14+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e2       	ldi	r20, 0x20	; 32
    25f0:	51 e4       	ldi	r21, 0x41	; 65
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	0f c0       	rjmp	.+30     	; 0x262a <__vector_14+0xee>
    260c:	88 ec       	ldi	r24, 0xC8	; 200
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <__vector_14+0xdc>
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	69 f7       	brne	.-38     	; 0x260c <__vector_14+0xd0>
    2632:	14 c0       	rjmp	.+40     	; 0x265c <__vector_14+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2634:	6f 81       	ldd	r22, Y+7	; 0x07
    2636:	78 85       	ldd	r23, Y+8	; 0x08
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	9a 85       	ldd	r25, Y+10	; 0x0a
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <__vector_14+0x118>
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    265c:	2e 96       	adiw	r28, 0x0e	; 14
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	ff 91       	pop	r31
    2668:	ef 91       	pop	r30
    266a:	bf 91       	pop	r27
    266c:	af 91       	pop	r26
    266e:	9f 91       	pop	r25
    2670:	8f 91       	pop	r24
    2672:	7f 91       	pop	r23
    2674:	6f 91       	pop	r22
    2676:	5f 91       	pop	r21
    2678:	4f 91       	pop	r20
    267a:	3f 91       	pop	r19
    267c:	2f 91       	pop	r18
    267e:	0f 90       	pop	r0
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	0f 90       	pop	r0
    2684:	1f 90       	pop	r1
    2686:	18 95       	reti

00002688 <__vector_15>:

ISR(_VECTOR(15))
{
    2688:	1f 92       	push	r1
    268a:	0f 92       	push	r0
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	0f 92       	push	r0
    2690:	11 24       	eor	r1, r1
    2692:	2f 93       	push	r18
    2694:	3f 93       	push	r19
    2696:	4f 93       	push	r20
    2698:	5f 93       	push	r21
    269a:	6f 93       	push	r22
    269c:	7f 93       	push	r23
    269e:	8f 93       	push	r24
    26a0:	9f 93       	push	r25
    26a2:	af 93       	push	r26
    26a4:	bf 93       	push	r27
    26a6:	ef 93       	push	r30
    26a8:	ff 93       	push	r31
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	2e 97       	sbiw	r28, 0x0e	; 14
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInteger(8);
    26b8:	68 e0       	ldi	r22, 0x08	; 8
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidInteger>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	aa e7       	ldi	r26, 0x7A	; 122
    26ca:	b4 e4       	ldi	r27, 0x44	; 68
    26cc:	8b 87       	std	Y+11, r24	; 0x0b
    26ce:	9c 87       	std	Y+12, r25	; 0x0c
    26d0:	ad 87       	std	Y+13, r26	; 0x0d
    26d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8f 83       	std	Y+7, r24	; 0x07
    26ee:	98 87       	std	Y+8, r25	; 0x08
    26f0:	a9 87       	std	Y+9, r26	; 0x09
    26f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <__vector_15+0x8e>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9e 83       	std	Y+6, r25	; 0x06
    2712:	8d 83       	std	Y+5, r24	; 0x05
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <__vector_15+0x10c>
	else if (__tmp > 65535)
    2716:	6f 81       	ldd	r22, Y+7	; 0x07
    2718:	78 85       	ldd	r23, Y+8	; 0x08
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	9a 85       	ldd	r25, Y+10	; 0x0a
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <__vector_15+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2730:	7c 85       	ldd	r23, Y+12	; 0x0c
    2732:	8d 85       	ldd	r24, Y+13	; 0x0d
    2734:	9e 85       	ldd	r25, Y+14	; 0x0e
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <__vector_15+0xee>
    2758:	88 ec       	ldi	r24, 0xC8	; 200
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9c 83       	std	Y+4, r25	; 0x04
    275e:	8b 83       	std	Y+3, r24	; 0x03
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <__vector_15+0xdc>
    2768:	9c 83       	std	Y+4, r25	; 0x04
    276a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	8d 81       	ldd	r24, Y+5	; 0x05
    276e:	9e 81       	ldd	r25, Y+6	; 0x06
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	69 f7       	brne	.-38     	; 0x2758 <__vector_15+0xd0>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <__vector_15+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <__vector_15+0x118>
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    27a8:	2e 96       	adiw	r28, 0x0e	; 14
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	ff 91       	pop	r31
    27b4:	ef 91       	pop	r30
    27b6:	bf 91       	pop	r27
    27b8:	af 91       	pop	r26
    27ba:	9f 91       	pop	r25
    27bc:	8f 91       	pop	r24
    27be:	7f 91       	pop	r23
    27c0:	6f 91       	pop	r22
    27c2:	5f 91       	pop	r21
    27c4:	4f 91       	pop	r20
    27c6:	3f 91       	pop	r19
    27c8:	2f 91       	pop	r18
    27ca:	0f 90       	pop	r0
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	0f 90       	pop	r0
    27d0:	1f 90       	pop	r1
    27d2:	18 95       	reti

000027d4 <main>:


int main(void)
{
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	2e 97       	sbiw	r28, 0x0e	; 14
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61

	BT_voidInit();
    27e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <BT_voidInit>
	LCD_voidInit();
    27ec:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_voidInit>
	LCD_voidInteger(1);
    27f0:	61 e0       	ldi	r22, 0x01	; 1
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidInteger>

	while(1)
	{
		LCD_voidInteger(3);
    27fc:	63 e0       	ldi	r22, 0x03	; 3
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidInteger>
		BT_voidTransmitString("ASMER ");
    2808:	80 e6       	ldi	r24, 0x60	; 96
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 c2 05 	call	0xb84	; 0xb84 <BT_voidTransmitString>
		LCD_voidInteger(4);
    2810:	64 e0       	ldi	r22, 0x04	; 4
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidInteger>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	aa ef       	ldi	r26, 0xFA	; 250
    2822:	b4 e4       	ldi	r27, 0x44	; 68
    2824:	8b 87       	std	Y+11, r24	; 0x0b
    2826:	9c 87       	std	Y+12, r25	; 0x0c
    2828:	ad 87       	std	Y+13, r26	; 0x0d
    282a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	6b 85       	ldd	r22, Y+11	; 0x0b
    282e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2830:	8d 85       	ldd	r24, Y+13	; 0x0d
    2832:	9e 85       	ldd	r25, Y+14	; 0x0e
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8f 83       	std	Y+7, r24	; 0x07
    2846:	98 87       	std	Y+8, r25	; 0x08
    2848:	a9 87       	std	Y+9, r26	; 0x09
    284a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <main+0x9a>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <main+0x118>
	else if (__tmp > 65535)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <main+0xfa>
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <main+0xe8>
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <main+0xdc>
    28d6:	92 cf       	rjmp	.-220    	; 0x27fc <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <main+0x124>
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	7d cf       	rjmp	.-262    	; 0x27fc <main+0x28>

00002902 <__prologue_saves__>:
    2902:	2f 92       	push	r2
    2904:	3f 92       	push	r3
    2906:	4f 92       	push	r4
    2908:	5f 92       	push	r5
    290a:	6f 92       	push	r6
    290c:	7f 92       	push	r7
    290e:	8f 92       	push	r8
    2910:	9f 92       	push	r9
    2912:	af 92       	push	r10
    2914:	bf 92       	push	r11
    2916:	cf 92       	push	r12
    2918:	df 92       	push	r13
    291a:	ef 92       	push	r14
    291c:	ff 92       	push	r15
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	ca 1b       	sub	r28, r26
    292c:	db 0b       	sbc	r29, r27
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	09 94       	ijmp

0000293a <__epilogue_restores__>:
    293a:	2a 88       	ldd	r2, Y+18	; 0x12
    293c:	39 88       	ldd	r3, Y+17	; 0x11
    293e:	48 88       	ldd	r4, Y+16	; 0x10
    2940:	5f 84       	ldd	r5, Y+15	; 0x0f
    2942:	6e 84       	ldd	r6, Y+14	; 0x0e
    2944:	7d 84       	ldd	r7, Y+13	; 0x0d
    2946:	8c 84       	ldd	r8, Y+12	; 0x0c
    2948:	9b 84       	ldd	r9, Y+11	; 0x0b
    294a:	aa 84       	ldd	r10, Y+10	; 0x0a
    294c:	b9 84       	ldd	r11, Y+9	; 0x09
    294e:	c8 84       	ldd	r12, Y+8	; 0x08
    2950:	df 80       	ldd	r13, Y+7	; 0x07
    2952:	ee 80       	ldd	r14, Y+6	; 0x06
    2954:	fd 80       	ldd	r15, Y+5	; 0x05
    2956:	0c 81       	ldd	r16, Y+4	; 0x04
    2958:	1b 81       	ldd	r17, Y+3	; 0x03
    295a:	aa 81       	ldd	r26, Y+2	; 0x02
    295c:	b9 81       	ldd	r27, Y+1	; 0x01
    295e:	ce 0f       	add	r28, r30
    2960:	d1 1d       	adc	r29, r1
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	ed 01       	movw	r28, r26
    296e:	08 95       	ret

00002970 <itoa>:
    2970:	fb 01       	movw	r30, r22
    2972:	9f 01       	movw	r18, r30
    2974:	e8 94       	clt
    2976:	42 30       	cpi	r20, 0x02	; 2
    2978:	c4 f0       	brlt	.+48     	; 0x29aa <itoa+0x3a>
    297a:	45 32       	cpi	r20, 0x25	; 37
    297c:	b4 f4       	brge	.+44     	; 0x29aa <itoa+0x3a>
    297e:	4a 30       	cpi	r20, 0x0A	; 10
    2980:	29 f4       	brne	.+10     	; 0x298c <itoa+0x1c>
    2982:	97 fb       	bst	r25, 7
    2984:	1e f4       	brtc	.+6      	; 0x298c <itoa+0x1c>
    2986:	90 95       	com	r25
    2988:	81 95       	neg	r24
    298a:	9f 4f       	sbci	r25, 0xFF	; 255
    298c:	64 2f       	mov	r22, r20
    298e:	77 27       	eor	r23, r23
    2990:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__udivmodhi4>
    2994:	80 5d       	subi	r24, 0xD0	; 208
    2996:	8a 33       	cpi	r24, 0x3A	; 58
    2998:	0c f0       	brlt	.+2      	; 0x299c <itoa+0x2c>
    299a:	89 5d       	subi	r24, 0xD9	; 217
    299c:	81 93       	st	Z+, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	a1 f7       	brne	.-24     	; 0x298c <itoa+0x1c>
    29a4:	16 f4       	brtc	.+4      	; 0x29aa <itoa+0x3a>
    29a6:	5d e2       	ldi	r21, 0x2D	; 45
    29a8:	51 93       	st	Z+, r21
    29aa:	10 82       	st	Z, r1
    29ac:	c9 01       	movw	r24, r18
    29ae:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <strrev>

000029b2 <strrev>:
    29b2:	dc 01       	movw	r26, r24
    29b4:	fc 01       	movw	r30, r24
    29b6:	67 2f       	mov	r22, r23
    29b8:	71 91       	ld	r23, Z+
    29ba:	77 23       	and	r23, r23
    29bc:	e1 f7       	brne	.-8      	; 0x29b6 <strrev+0x4>
    29be:	32 97       	sbiw	r30, 0x02	; 2
    29c0:	04 c0       	rjmp	.+8      	; 0x29ca <strrev+0x18>
    29c2:	7c 91       	ld	r23, X
    29c4:	6d 93       	st	X+, r22
    29c6:	70 83       	st	Z, r23
    29c8:	62 91       	ld	r22, -Z
    29ca:	ae 17       	cp	r26, r30
    29cc:	bf 07       	cpc	r27, r31
    29ce:	c8 f3       	brcs	.-14     	; 0x29c2 <strrev+0x10>
    29d0:	08 95       	ret

000029d2 <__udivmodhi4>:
    29d2:	aa 1b       	sub	r26, r26
    29d4:	bb 1b       	sub	r27, r27
    29d6:	51 e1       	ldi	r21, 0x11	; 17
    29d8:	07 c0       	rjmp	.+14     	; 0x29e8 <__udivmodhi4_ep>

000029da <__udivmodhi4_loop>:
    29da:	aa 1f       	adc	r26, r26
    29dc:	bb 1f       	adc	r27, r27
    29de:	a6 17       	cp	r26, r22
    29e0:	b7 07       	cpc	r27, r23
    29e2:	10 f0       	brcs	.+4      	; 0x29e8 <__udivmodhi4_ep>
    29e4:	a6 1b       	sub	r26, r22
    29e6:	b7 0b       	sbc	r27, r23

000029e8 <__udivmodhi4_ep>:
    29e8:	88 1f       	adc	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	5a 95       	dec	r21
    29ee:	a9 f7       	brne	.-22     	; 0x29da <__udivmodhi4_loop>
    29f0:	80 95       	com	r24
    29f2:	90 95       	com	r25
    29f4:	bc 01       	movw	r22, r24
    29f6:	cd 01       	movw	r24, r26
    29f8:	08 95       	ret

000029fa <_exit>:
    29fa:	f8 94       	cli

000029fc <__stop_program>:
    29fc:	ff cf       	rjmp	.-2      	; 0x29fc <__stop_program>
